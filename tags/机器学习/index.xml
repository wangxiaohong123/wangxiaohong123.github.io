<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>机器学习 on 王小红的笔记</title><link>https://wangxiaohong123.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</link><description>Recent content in 机器学习 on 王小红的笔记</description><generator>Hugo -- 0.150.0</generator><language>zh-CN</language><atom:link href="https://wangxiaohong123.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/index.xml" rel="self" type="application/rss+xml"/><item><title>1.机器学习介绍</title><link>https://wangxiaohong123.github.io/posts/ai/1.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%BB%8B%E7%BB%8D/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wangxiaohong123.github.io/posts/ai/1.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%BB%8B%E7%BB%8D/</guid><description>&lt;p&gt;图灵在50年的时候提出机器思维：一个人在不知道对方是计算机的情况下进行&lt;strong&gt;很长&lt;/strong&gt;时间的问答，如果无法判断对方是不是计算机就说明这个计算机有了人的思维。56年的时候麦卡锡提出了人工智能的术语。&lt;/p&gt;
&lt;p&gt;柏拉图假说：不同的人工智能系统以不同的方式表示世界，视觉系统表示为形状和颜色，语言模型表示为语法和语义；但是随着参数规模、训练数据的不断扩大，不同模型对于现实的表征方式会越来越相似，所以现在的大语言模型或者文生视频这种其他模型都使用全模态(文本、视频、音频、深度图等)数据来训练，比单一模态数据性能提高20%。这就发展成现在很多模型都是在大语言模型上微调来的，比如qwen2-VL是基于qwen2的，CogVLM2机遇llama3 8b微调来的。&lt;/p&gt;
&lt;h3 id="1-介绍"&gt;1 介绍&lt;/h3&gt;
&lt;p&gt;人工智能发展阶段&lt;/p&gt;
&lt;p&gt;&lt;img alt="人工智能发展阶段" loading="lazy" src="https://raw.githubusercontent.com/wangxiaohong123/p-bed/main/uPic/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%8F%91%E5%B1%95%E9%98%B6%E6%AE%B5.png"&gt;&lt;/p&gt;
&lt;h4 id="11-人工智能"&gt;1.1 人工智能&lt;/h4&gt;
&lt;p&gt;三要素：数据，算法，计算力，CPU核心数较少，基于冯诺依曼架构(存储程序，顺序执行)，适合逻辑控制，处理复杂的指令集；GPU核心数较多，适合&lt;strong&gt;并行&lt;/strong&gt;处理大量简单且重复的指令，比如矩阵、向量计算；TPU是Google专门为机器学习设计的芯片。&lt;/p&gt;
&lt;p&gt;机器学习是人工智能的实现途径，而深度学习是机器学习发展而来，也就是神经网络。195x年最开始人工智能最多就是和人下个黑白棋，198x年开始使用机器学习分辨垃圾邮件，201x年开始深度学习让机器可以识别图片。&lt;/p&gt;
&lt;p&gt;现在的模型分大模型和普通模型，普通模型就像专攻一样，训练的数据有10种类别，他就只能做这10种类别的事。大模型的不光是模型的架构大，也是数据集的大，大模型也可能自己创造训练数据，训练自己，比如segment anything。&lt;/p&gt;
&lt;h5 id="111-当前人工智能目前主要应用领域"&gt;1.1.1 当前人工智能目前主要应用领域&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;计算机视觉(CV)：机器感知环境的能力，比如物体检测和人脸识别。&lt;/li&gt;
&lt;li&gt;自然语言处理(NLP)：自然语言处理又包括语音识别、机器翻译、文本挖掘和分类：
&lt;ul&gt;
&lt;li&gt;文本挖掘和分类：主要是对文字的情绪分析和垃圾检测，目前尤其是中文不同的词在不同的场景有不同的语义是一个难点。&lt;/li&gt;
&lt;li&gt;机器翻译：方言、行话是难题。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;语音：语音识别，语音合成什么的，音转文和文转音是一个领域，现在声纹识别和鸡尾酒会效应很难处理好。声纹和指纹差不多，每个人的声音都不一样，如果能提取出人的声纹那就可以实现声音支付了。鸡尾酒会是说人的大脑在和别人专心讨论的时候会自动降燥，专注和交流目标对话，目前计算机只能做到很多人说话，找不到应该重点听谁发出的声音。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="12-机器学习算法分类"&gt;1.2 机器学习算法分类&lt;/h4&gt;
&lt;p&gt;算法方向分为ML机器学习，DL深度学习，RL强化学习。&lt;/p&gt;
&lt;p&gt;根据数据集组成可以将机器学习的算法分为监督学习、无监督学习、半监督学习和强化学习。如果&lt;strong&gt;输出是连续的成为回归，输出是有限个离散值叫分类&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;监督学习：输入数据由特征值和目标值组成；&lt;/li&gt;
&lt;li&gt;无监督学习：输入数据只有特征没有目标值；&lt;/li&gt;
&lt;li&gt;半监督学习：输入数据部分没有目标值，适合数据难标记或者标记成本高的情况，先用少量标记初步训练，然后用未标记数据训练；&lt;/li&gt;
&lt;li&gt;强化学习：强化学习是一个决策问题，可以做连续的自动决策，包含5个元素：agent(代理体)，action(行动)，reward(奖励)，environment(环境)和observation(观察情况)，比如让程序中的某个角色模拟走路，这个角色就是agent，他需要决定先迈左脚还是右脚，迈出一步还要不要在迈一步，迈步就是action，地面就是environment，走了几步可以给他reward。强化学习的目标是获得最多的累积奖励；他是不断跟环境交互获取经验，不断进步的过程。通过设计奖励惩罚机制，每正确n步会产生奖励，模型的本质就是获取更多奖励。ALPHAGo、机械手臂、deepseek R1模型都是强化学习实现的。&lt;strong&gt;强化学习更像有大脑在思考一样&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;对比学习：相当于计算机视觉上的自监督学习，通过&lt;strong&gt;随机的图像增强&lt;/strong&gt;让一张图片随机变成别的样子，但是还属于同一类，这样来代替打标签的操作，同类越相似的思想。如果数据增强变成了核心，数据越离谱学到的东西可能就越多，越花里胡哨效果越好。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;监督学习输入的特征都是独立同分布的，独立说的是每次抽样之间相互独立，没有影响，比如掷2次骰子的和大于8，第二次的结果和第一次相关，就不是独立的；同分布说的是每次抽样的样本服从同一个分布，比如掷骰子，每次得到任意点数的概率都是1/6。&lt;/p&gt;
&lt;h5 id="121-强化学习算法"&gt;1.2.1 强化学习算法&lt;/h5&gt;
&lt;h6 id="1211-proximal-policy-optimizationppo算法"&gt;1.2.1.1 Proximal Policy Optimization(PPO)算法&lt;/h6&gt;
&lt;p&gt;核心思想：PPO 主要改进了策略梯度方法（如 REINFORCE）和信赖域策略优化（Trust Region Policy Optimization, TRPO），使其更加稳定、高效，并且易于实现。其核心思想包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;克服策略更新的不稳定性&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;在策略梯度方法中，策略的更新可能会导致较大的变化，从而影响学习稳定性。&lt;/li&gt;
&lt;li&gt;TRPO 通过优化约束（KL 散度约束）限制策略更新的幅度，但实现较为复杂。&lt;/li&gt;
&lt;li&gt;PPO 采用了一种更简单且高效的方法，即 &lt;strong&gt;剪辑（Clipping）策略比率&lt;/strong&gt; 来约束策略的更新幅度。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用信赖区域（Trust Region）控制策略更新幅度&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;PPO 通过 &lt;strong&gt;目标函数中的剪辑项&lt;/strong&gt; 限制策略的更新步长，从而避免策略发生剧烈变化，提高训练稳定性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;PPO 的两种变体：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;PPO-Clip（剪辑版 PPO）&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;直接对策略比率（ratio）进行剪辑，确保策略不会更新过大。&lt;/li&gt;
&lt;li&gt;目标函数： $L^{clip}(θ)=E[min⁡(r_t(θ)A_t,clip(r_t(θ),1−ϵ,1+ϵ)A_t)]$&lt;/li&gt;
&lt;li&gt;其中：
&lt;ul&gt;
&lt;li&gt;$r_t(θ)= \frac{\pi_{\theta}(a_t | s_t)}{\pi_{\theta_{\text{old}}}(a_t | s_t)}$（新的策略与旧的策略的比率）&lt;/li&gt;
&lt;li&gt;$A_t$ 为优势函数（Advantage Function）&lt;/li&gt;
&lt;li&gt;ϵ 是超参数（通常设为 0.1~0.2）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PPO-Penalty（KL 散度惩罚版 PPO）&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;在优化目标中添加 KL 散度（Kullback-Leibler Divergence）惩罚项，确保策略不会偏离过远： $L^{KL}(θ)=E[L^{clip}(θ)−βD_{KL}[π_{θold}∣∣π_θ]]$&lt;/li&gt;
&lt;li&gt;其中：
&lt;ul&gt;
&lt;li&gt;$D_{\text{KL}}$ 表示旧策略与新策略之间的 KL 散度。&lt;/li&gt;
&lt;li&gt;β 是一个超参数，用于调整 KL 惩罚的权重。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id="1212-q-learning和dqn"&gt;1.2.1.2 Q-learning和DQN&lt;/h6&gt;
&lt;p&gt;Q-learing包括2部分，瞬时奖励(做了1个动作就能获得的奖励)和记忆经验奖励(按照训练时的记忆，之后怎么做才能获得更大的奖励)，DQN是对Q-learning的扩展，使用神经网络计算Q-learning函数的参数。&lt;/p&gt;</description></item><item><title>2.机器学习基础</title><link>https://wangxiaohong123.github.io/posts/ai/2.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wangxiaohong123.github.io/posts/ai/2.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/</guid><description>&lt;p&gt;机器学习就是模仿人类处理问题，人类是先从经验归纳，机器学习也是自动从数据中获取模型，用模型对位置数据进行预测。白话讲就是从历史数据里找规律，有了规律之后根据输入的数据输出结果，这个规律就是模型。比如说某个样子的物体是猫，那下次看见类似的也可以把他当成猫。&lt;/p&gt;
&lt;p&gt;机器学习不能解决的问题，跨域：机器学习学习的是历史数据的特征，新的数据不可能和历史数据有一样的特征分布&lt;/p&gt;
&lt;h3 id="1-计算机视觉"&gt;1. 计算机视觉&lt;/h3&gt;
&lt;p&gt;用摄像机、电脑或者其他设备模拟生物视觉，让计算机理解图片或者视频中的内容。可以分为三类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;图像分类：将图像结构化成类别信息，用实现确定好的类别来描述图片。&lt;/li&gt;
&lt;li&gt;目标检测：关注特定的物体目标，要求获取这一目标的类别和位置信息，他和分类的区别是，分类将图片当做整体，目标检测可以在一张图片中获取多种目标及位置。&lt;/li&gt;
&lt;li&gt;图像分割：分割是在检测的基础上还需要获取像素信息。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;应用领域：人脸识别、视频监控、智能驾驶、图片识别（以图搜图，图片鉴黄），比如抖音送礼的眼镜特效属于人脸识别里的人脸关键点定位。&lt;/p&gt;
&lt;h3 id="2-自然语言处理"&gt;2. 自然语言处理&lt;/h3&gt;
&lt;p&gt;语言模型是用来计算下一个句子概率的模型。&lt;/p&gt;
&lt;h3 id="3-时间序列"&gt;3 时间序列&lt;/h3&gt;
&lt;p&gt;时间序列是一种 &lt;strong&gt;有序的、依赖时间的结构化数据&lt;/strong&gt;，其核心任务是研究和预测数据随时间变化的规律。深度学习为时间序列任务提供了更强大的建模工具，尤其是在处理复杂非线性关系或长时间依赖时。他是一个跨领域的问题，还会涉及到统计学等。&lt;/p&gt;
&lt;h3 id="3-机器学习的工作流程"&gt;3. 机器学习的工作流程：&lt;/h3&gt;
&lt;p&gt;获取数据-&amp;gt;对数据进行基本处理-&amp;gt;特征工程-&amp;gt;机器学习(模型训练，也是算法应用的过程)-&amp;gt;模型评估，如果模型评估没有达到要求需要从对数据进行基本处理重新进行一遍。&lt;/p&gt;
&lt;h4 id="31-获取数据"&gt;3.1 获取数据&lt;/h4&gt;
&lt;p&gt;拿到的数据类似于表格，一行就是一个样本，一列就是一个特征，涉及到判断的列不叫特征，叫目标值，不是所有数据都有目标值。数据分为训练数据和测试数据，一般比例为3/7或者2/8。&lt;/p&gt;
&lt;h4 id="32-数据基本处理"&gt;3.2 数据基本处理&lt;/h4&gt;
&lt;p&gt;修改数据的空值、异常值、类型转换等。&lt;/p&gt;
&lt;h4 id="33-特征工程"&gt;3.3 特征工程&lt;/h4&gt;
&lt;p&gt;对数据的进一步处理。包括特征提取(比如将文本或者图片转换成可以用于机器学习的数字)，特征预处理(通过一些函数将数据转换成适合算法模型的特征数据)和特征降维(降低特征个数)。&lt;/p&gt;
&lt;h5 id="331-特征预处理"&gt;3.3.1 特征预处理&lt;/h5&gt;
&lt;p&gt;将数据转换成机器更好识别，更好处理的数据。当特征数据的单位或者大小相差较大，或者某个特征的方差相比其他的方差大出好几个数量级，这种情况可能这个特征对结果的影响比较大，使得算法无法学习到其他特征。&lt;/p&gt;
&lt;h6 id="3311-归一化"&gt;3.3.1.1 归一化&lt;/h6&gt;
&lt;p&gt;把原始数据映射到某个区间内，默认0~1。计算公式为：
$$
X' = \frac {x - min}{max - min}\&lt;/p&gt;
&lt;p&gt;X'' = X' * (mx - mi) + mi
$$
上面的公式中，X''就是归一化处理后的特征值，max和min表示初始特征值的最大值和最小值，mx和mi表示想要将特征值映射到区间的最大值和最小值。&lt;/p&gt;
&lt;p&gt;归一化的时候如果出现一条特征统计不正确，比如有1条数据比其他的大了很多倍或者小了很多倍，这种情况对其他数据的影响很大，所以这种方法鲁棒性较差，只适合精确小数据场景。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;"&gt;&lt;tr&gt;&lt;td style="vertical-align:top;padding:0;margin:0;border:0;"&gt;
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;1
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;2
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;3
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;4
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;5
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;6
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;7
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;8
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%"&gt;
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ff79c6"&gt;import&lt;/span&gt; pandas &lt;span style="color:#ff79c6"&gt;as&lt;/span&gt; pd
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ff79c6"&gt;from&lt;/span&gt; sklearn.preprocessing &lt;span style="color:#ff79c6"&gt;import&lt;/span&gt; MinMaxScaler
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data &lt;span style="color:#ff79c6"&gt;=&lt;/span&gt; pd&lt;span style="color:#ff79c6"&gt;.&lt;/span&gt;read_csv(&lt;span style="color:#f1fa8c"&gt;&amp;#39;./data/dating.txt&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# 实例化转化器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;transfer &lt;span style="color:#ff79c6"&gt;=&lt;/span&gt; MinMaxScaler(featrue_range&lt;span style="color:#ff79c6"&gt;=&lt;/span&gt;(&lt;span style="color:#bd93f9"&gt;3&lt;/span&gt;, &lt;span style="color:#bd93f9"&gt;5&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# 将目标列转换到指定区间，这里是3~5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ret_data &lt;span style="color:#ff79c6"&gt;=&lt;/span&gt; transfer&lt;span style="color:#ff79c6"&gt;.&lt;/span&gt;fit_transform(data[[&lt;span style="color:#f1fa8c"&gt;&amp;#34;列1名称&amp;#34;&lt;/span&gt;, &lt;span style="color:#f1fa8c"&gt;&amp;#34;列2名称&amp;#34;&lt;/span&gt;]])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;print&lt;/span&gt;(&lt;span style="color:#f1fa8c"&gt;&amp;#34;转化后的数据:&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;\n&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;&amp;#34;&lt;/span&gt;, ret_data)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h6 id="3312-标准化"&gt;3.3.1.2 标准化&lt;/h6&gt;
&lt;div class="highlight"&gt;&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;"&gt;&lt;tr&gt;&lt;td style="vertical-align:top;padding:0;margin:0;border:0;"&gt;
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 1
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 2
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 3
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 4
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 5
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 6
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 7
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 8
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 9
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;10
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%"&gt;
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ff79c6"&gt;import&lt;/span&gt; pandas &lt;span style="color:#ff79c6"&gt;as&lt;/span&gt; pd
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ff79c6"&gt;from&lt;/span&gt; sklearn.preprocessing &lt;span style="color:#ff79c6"&gt;import&lt;/span&gt; StandardScaler
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data &lt;span style="color:#ff79c6"&gt;=&lt;/span&gt; pd&lt;span style="color:#ff79c6"&gt;.&lt;/span&gt;read_csv(&lt;span style="color:#f1fa8c"&gt;&amp;#39;./data/dating.txt&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# 实例化转化器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;transfer &lt;span style="color:#ff79c6"&gt;=&lt;/span&gt; StandardScaler()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# 将目标列转标准化&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ret_data &lt;span style="color:#ff79c6"&gt;=&lt;/span&gt; transfer&lt;span style="color:#ff79c6"&gt;.&lt;/span&gt;fit_transform(data[[&lt;span style="color:#f1fa8c"&gt;&amp;#34;列1名称&amp;#34;&lt;/span&gt;, &lt;span style="color:#f1fa8c"&gt;&amp;#34;列2名称&amp;#34;&lt;/span&gt;]])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;print&lt;/span&gt;(&lt;span style="color:#f1fa8c"&gt;&amp;#34;转化后的数据:&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;\n&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;&amp;#34;&lt;/span&gt;, ret_data)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;print&lt;/span&gt;(&lt;span style="color:#f1fa8c"&gt;&amp;#34;每一列的方差为:&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;\n&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;&amp;#34;&lt;/span&gt;, transfer&lt;span style="color:#ff79c6"&gt;.&lt;/span&gt;var_)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;print&lt;/span&gt;(&lt;span style="color:#f1fa8c"&gt;&amp;#34;每一列的平均值为:&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;\n&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;&amp;#34;&lt;/span&gt;, transfer&lt;span style="color:#ff79c6"&gt;.&lt;/span&gt;mean_)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;第一步就是去均值，将平均值变成0，然后在比上标准差，这样能让所有维度的数相差不大：$X' = \frac{x - avg}{\sigma}$。&lt;/p&gt;</description></item><item><title>3.机器学习算法</title><link>https://wangxiaohong123.github.io/posts/ai/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wangxiaohong123.github.io/posts/ai/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/</guid><description>&lt;h5 id="距离度量"&gt;距离度量&lt;/h5&gt;
&lt;p&gt;一些算法会需要距离度量，比如K近邻、SVM、聚类等，距离有4个特性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;非负性：两点的距离不能小于0；&lt;/li&gt;
&lt;li&gt;同一性：两点的距离=0说明时同1个点；&lt;/li&gt;
&lt;li&gt;对称性：x到y的距离时0时，y到x的距离也是0；&lt;/li&gt;
&lt;li&gt;直递性：dist(i,j)&amp;lt;=dist(i,k) + dist(k,j);&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;常见的距离公式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;欧式距离：两个点就是勾股定理，n个点就开根号n；&lt;/li&gt;
&lt;li&gt;曼哈顿距离：曼哈顿距离是当两个点不能练成直线时的距离，计算公式：$\sum_{k=1}^n\vert X_{k}-X_{k-1} \vert$；&lt;/li&gt;
&lt;li&gt;切比雪夫距离：类比于国际象棋中的国王走棋的方式，国王可以在一个步长内向任何方向移动，两点的距离公式为$D(P,Q)=max(\vert x_1−x_2\vert,\vert y_1−y_2\vert,...,\vert x_n−x_{n+1}\vert)$​；&lt;/li&gt;
&lt;li&gt;闵氏距离：闵氏距离是将上面3个变成了1个公式，当p=1的时候是曼哈顿距离，p=2的时候是欧式距离，p&amp;gt;=3的时候是切比雪夫距离&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="1-k近邻算法"&gt;1 K近邻算法&lt;/h3&gt;
&lt;p&gt;根据最近的距离判断类别，最近的样本数据是什么类别，你就是什么类别，这里的样本数量可以取n个。也叫KNN算法。&lt;/p&gt;
&lt;p&gt;求两个坐标的距离使用勾股定理，多维也是一样的。&lt;/p&gt;
&lt;p&gt;比如现有数据：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;电影名&lt;/th&gt;
&lt;th&gt;搞笑镜头&lt;/th&gt;
&lt;th&gt;拥抱镜头&lt;/th&gt;
&lt;th&gt;打斗镜头&lt;/th&gt;
&lt;th&gt;电影类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;功夫熊猫&lt;/td&gt;
&lt;td&gt;39&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;td&gt;喜剧片&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;叶问3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;65&lt;/td&gt;
&lt;td&gt;动作片&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;二次曝光&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;55&lt;/td&gt;
&lt;td&gt;爱情片&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;代理情人&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;38&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;爱情片&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;步步惊心&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;34&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;爱情片&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;谍影重重&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;57&lt;/td&gt;
&lt;td&gt;动作片&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;美人鱼&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;喜剧片&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;小鬼当家&lt;/td&gt;
&lt;td&gt;45&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;喜剧片&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;唐人街探案&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;唐人街探案时测试数据，上面的事样本数据，需要判断唐人街探案是什么类型的电影时，就要先求出唐人街探案距离每个电影的距离：&lt;/p&gt;</description></item></channel></rss>