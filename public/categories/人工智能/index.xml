<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>人工智能 on 王小红的笔记</title>
    <link>http://localhost:1313/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/</link>
    <description>Recent content in 人工智能 on 王小红的笔记</description>
    <generator>Hugo -- 0.150.0</generator>
    <language>zh-CN</language>
    <atom:link href="http://localhost:1313/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1.机器学习介绍</title>
      <link>http://localhost:1313/posts/ai/1.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/ai/1.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%BB%8B%E7%BB%8D/</guid>
      <description>&lt;p&gt;图灵在50年的时候提出机器思维：一个人在不知道对方是计算机的情况下进行&lt;strong&gt;很长&lt;/strong&gt;时间的问答，如果无法判断对方是不是计算机就说明这个计算机有了人的思维。56年的时候麦卡锡提出了人工智能的术语。&lt;/p&gt;
&lt;p&gt;柏拉图假说：不同的人工智能系统以不同的方式表示世界，视觉系统表示为形状和颜色，语言模型表示为语法和语义；但是随着参数规模、训练数据的不断扩大，不同模型对于现实的表征方式会越来越相似，所以现在的大语言模型或者文生视频这种其他模型都使用全模态(文本、视频、音频、深度图等)数据来训练，比单一模态数据性能提高20%。这就发展成现在很多模型都是在大语言模型上微调来的，比如qwen2-VL是基于qwen2的，CogVLM2机遇llama3 8b微调来的。&lt;/p&gt;
&lt;h3 id=&#34;1-介绍&#34;&gt;1 介绍&lt;/h3&gt;
&lt;p&gt;人工智能发展阶段&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;人工智能发展阶段&#34; loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/wangxiaohong123/p-bed/main/uPic/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%8F%91%E5%B1%95%E9%98%B6%E6%AE%B5.png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;11-人工智能&#34;&gt;1.1 人工智能&lt;/h4&gt;
&lt;p&gt;三要素：数据，算法，计算力，CPU核心数较少，基于冯诺依曼架构(存储程序，顺序执行)，适合逻辑控制，处理复杂的指令集；GPU核心数较多，适合&lt;strong&gt;并行&lt;/strong&gt;处理大量简单且重复的指令，比如矩阵、向量计算；TPU是Google专门为机器学习设计的芯片。&lt;/p&gt;
&lt;p&gt;机器学习是人工智能的实现途径，而深度学习是机器学习发展而来，也就是神经网络。195x年最开始人工智能最多就是和人下个黑白棋，198x年开始使用机器学习分辨垃圾邮件，201x年开始深度学习让机器可以识别图片。&lt;/p&gt;
&lt;p&gt;现在的模型分大模型和普通模型，普通模型就像专攻一样，训练的数据有10种类别，他就只能做这10种类别的事。大模型的不光是模型的架构大，也是数据集的大，大模型也可能自己创造训练数据，训练自己，比如segment anything。&lt;/p&gt;
&lt;h5 id=&#34;111-当前人工智能目前主要应用领域&#34;&gt;1.1.1 当前人工智能目前主要应用领域&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;计算机视觉(CV)：机器感知环境的能力，比如物体检测和人脸识别。&lt;/li&gt;
&lt;li&gt;自然语言处理(NLP)：自然语言处理又包括语音识别、机器翻译、文本挖掘和分类：
&lt;ul&gt;
&lt;li&gt;文本挖掘和分类：主要是对文字的情绪分析和垃圾检测，目前尤其是中文不同的词在不同的场景有不同的语义是一个难点。&lt;/li&gt;
&lt;li&gt;机器翻译：方言、行话是难题。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;语音：语音识别，语音合成什么的，音转文和文转音是一个领域，现在声纹识别和鸡尾酒会效应很难处理好。声纹和指纹差不多，每个人的声音都不一样，如果能提取出人的声纹那就可以实现声音支付了。鸡尾酒会是说人的大脑在和别人专心讨论的时候会自动降燥，专注和交流目标对话，目前计算机只能做到很多人说话，找不到应该重点听谁发出的声音。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;12-机器学习算法分类&#34;&gt;1.2 机器学习算法分类&lt;/h4&gt;
&lt;p&gt;算法方向分为ML机器学习，DL深度学习，RL强化学习。&lt;/p&gt;
&lt;p&gt;根据数据集组成可以将机器学习的算法分为监督学习、无监督学习、半监督学习和强化学习。如果&lt;strong&gt;输出是连续的成为回归，输出是有限个离散值叫分类&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;监督学习：输入数据由特征值和目标值组成；&lt;/li&gt;
&lt;li&gt;无监督学习：输入数据只有特征没有目标值；&lt;/li&gt;
&lt;li&gt;半监督学习：输入数据部分没有目标值，适合数据难标记或者标记成本高的情况，先用少量标记初步训练，然后用未标记数据训练；&lt;/li&gt;
&lt;li&gt;强化学习：强化学习是一个决策问题，可以做连续的自动决策，包含5个元素：agent(代理体)，action(行动)，reward(奖励)，environment(环境)和observation(观察情况)，比如让程序中的某个角色模拟走路，这个角色就是agent，他需要决定先迈左脚还是右脚，迈出一步还要不要在迈一步，迈步就是action，地面就是environment，走了几步可以给他reward。强化学习的目标是获得最多的累积奖励；他是不断跟环境交互获取经验，不断进步的过程。通过设计奖励惩罚机制，每正确n步会产生奖励，模型的本质就是获取更多奖励。ALPHAGo、机械手臂、deepseek R1模型都是强化学习实现的。&lt;strong&gt;强化学习更像有大脑在思考一样&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;对比学习：相当于计算机视觉上的自监督学习，通过&lt;strong&gt;随机的图像增强&lt;/strong&gt;让一张图片随机变成别的样子，但是还属于同一类，这样来代替打标签的操作，同类越相似的思想。如果数据增强变成了核心，数据越离谱学到的东西可能就越多，越花里胡哨效果越好。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;监督学习输入的特征都是独立同分布的，独立说的是每次抽样之间相互独立，没有影响，比如掷2次骰子的和大于8，第二次的结果和第一次相关，就不是独立的；同分布说的是每次抽样的样本服从同一个分布，比如掷骰子，每次得到任意点数的概率都是1/6。&lt;/p&gt;
&lt;h5 id=&#34;121-强化学习算法&#34;&gt;1.2.1 强化学习算法&lt;/h5&gt;
&lt;h6 id=&#34;1211-proximal-policy-optimizationppo算法&#34;&gt;1.2.1.1 Proximal Policy Optimization(PPO)算法&lt;/h6&gt;
&lt;p&gt;核心思想：PPO 主要改进了策略梯度方法（如 REINFORCE）和信赖域策略优化（Trust Region Policy Optimization, TRPO），使其更加稳定、高效，并且易于实现。其核心思想包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;克服策略更新的不稳定性&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;在策略梯度方法中，策略的更新可能会导致较大的变化，从而影响学习稳定性。&lt;/li&gt;
&lt;li&gt;TRPO 通过优化约束（KL 散度约束）限制策略更新的幅度，但实现较为复杂。&lt;/li&gt;
&lt;li&gt;PPO 采用了一种更简单且高效的方法，即 &lt;strong&gt;剪辑（Clipping）策略比率&lt;/strong&gt; 来约束策略的更新幅度。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用信赖区域（Trust Region）控制策略更新幅度&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;PPO 通过 &lt;strong&gt;目标函数中的剪辑项&lt;/strong&gt; 限制策略的更新步长，从而避免策略发生剧烈变化，提高训练稳定性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;PPO 的两种变体：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;PPO-Clip（剪辑版 PPO）&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;直接对策略比率（ratio）进行剪辑，确保策略不会更新过大。&lt;/li&gt;
&lt;li&gt;目标函数： $L^{clip}(θ)=E[min⁡(r_t(θ)A_t,clip(r_t(θ),1−ϵ,1+ϵ)A_t)]$&lt;/li&gt;
&lt;li&gt;其中：
&lt;ul&gt;
&lt;li&gt;$r_t(θ)= \frac{\pi_{\theta}(a_t | s_t)}{\pi_{\theta_{\text{old}}}(a_t | s_t)}$（新的策略与旧的策略的比率）&lt;/li&gt;
&lt;li&gt;$A_t$ 为优势函数（Advantage Function）&lt;/li&gt;
&lt;li&gt;ϵ 是超参数（通常设为 0.1~0.2）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PPO-Penalty（KL 散度惩罚版 PPO）&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;在优化目标中添加 KL 散度（Kullback-Leibler Divergence）惩罚项，确保策略不会偏离过远： $L^{KL}(θ)=E[L^{clip}(θ)−βD_{KL}[π_{θold}∣∣π_θ]]$&lt;/li&gt;
&lt;li&gt;其中：
&lt;ul&gt;
&lt;li&gt;$D_{\text{KL}}$ 表示旧策略与新策略之间的 KL 散度。&lt;/li&gt;
&lt;li&gt;β 是一个超参数，用于调整 KL 惩罚的权重。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id=&#34;1212-q-learning和dqn&#34;&gt;1.2.1.2 Q-learning和DQN&lt;/h6&gt;
&lt;p&gt;Q-learing包括2部分，瞬时奖励(做了1个动作就能获得的奖励)和记忆经验奖励(按照训练时的记忆，之后怎么做才能获得更大的奖励)，DQN是对Q-learning的扩展，使用神经网络计算Q-learning函数的参数。&lt;/p&gt;</description>
    </item>
    <item>
      <title>10.RAG</title>
      <link>http://localhost:1313/posts/ai/10.rag/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/ai/10.rag/</guid>
      <description>&lt;h4 id=&#34;langchain&#34;&gt;LangChain&lt;/h4&gt;
&lt;p&gt;LangChain是用来构建大模型应用的框架，相当于python的django、java的Spring。尤其是在RAG领域作用非常大。&lt;/p&gt;
&lt;h5 id=&#34;rlhf基于人类反馈的强化学习&#34;&gt;RLHF（基于人类反馈的强化学习）&lt;/h5&gt;</description>
    </item>
    <item>
      <title>2.机器学习基础</title>
      <link>http://localhost:1313/posts/ai/2.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/ai/2.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/</guid>
      <description>&lt;p&gt;机器学习就是模仿人类处理问题，人类是先从经验归纳，机器学习也是自动从数据中获取模型，用模型对位置数据进行预测。白话讲就是从历史数据里找规律，有了规律之后根据输入的数据输出结果，这个规律就是模型。比如说某个样子的物体是猫，那下次看见类似的也可以把他当成猫。&lt;/p&gt;
&lt;p&gt;机器学习不能解决的问题，跨域：机器学习学习的是历史数据的特征，新的数据不可能和历史数据有一样的特征分布&lt;/p&gt;
&lt;h3 id=&#34;1-计算机视觉&#34;&gt;1. 计算机视觉&lt;/h3&gt;
&lt;p&gt;用摄像机、电脑或者其他设备模拟生物视觉，让计算机理解图片或者视频中的内容。可以分为三类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;图像分类：将图像结构化成类别信息，用实现确定好的类别来描述图片。&lt;/li&gt;
&lt;li&gt;目标检测：关注特定的物体目标，要求获取这一目标的类别和位置信息，他和分类的区别是，分类将图片当做整体，目标检测可以在一张图片中获取多种目标及位置。&lt;/li&gt;
&lt;li&gt;图像分割：分割是在检测的基础上还需要获取像素信息。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;应用领域：人脸识别、视频监控、智能驾驶、图片识别（以图搜图，图片鉴黄），比如抖音送礼的眼镜特效属于人脸识别里的人脸关键点定位。&lt;/p&gt;
&lt;h3 id=&#34;2-自然语言处理&#34;&gt;2. 自然语言处理&lt;/h3&gt;
&lt;p&gt;语言模型是用来计算下一个句子概率的模型。&lt;/p&gt;
&lt;h3 id=&#34;3-时间序列&#34;&gt;3 时间序列&lt;/h3&gt;
&lt;p&gt;时间序列是一种 &lt;strong&gt;有序的、依赖时间的结构化数据&lt;/strong&gt;，其核心任务是研究和预测数据随时间变化的规律。深度学习为时间序列任务提供了更强大的建模工具，尤其是在处理复杂非线性关系或长时间依赖时。他是一个跨领域的问题，还会涉及到统计学等。&lt;/p&gt;
&lt;h3 id=&#34;3-机器学习的工作流程&#34;&gt;3. 机器学习的工作流程：&lt;/h3&gt;
&lt;p&gt;获取数据-&amp;gt;对数据进行基本处理-&amp;gt;特征工程-&amp;gt;机器学习(模型训练，也是算法应用的过程)-&amp;gt;模型评估，如果模型评估没有达到要求需要从对数据进行基本处理重新进行一遍。&lt;/p&gt;
&lt;h4 id=&#34;31-获取数据&#34;&gt;3.1 获取数据&lt;/h4&gt;
&lt;p&gt;拿到的数据类似于表格，一行就是一个样本，一列就是一个特征，涉及到判断的列不叫特征，叫目标值，不是所有数据都有目标值。数据分为训练数据和测试数据，一般比例为3/7或者2/8。&lt;/p&gt;
&lt;h4 id=&#34;32-数据基本处理&#34;&gt;3.2 数据基本处理&lt;/h4&gt;
&lt;p&gt;修改数据的空值、异常值、类型转换等。&lt;/p&gt;
&lt;h4 id=&#34;33-特征工程&#34;&gt;3.3 特征工程&lt;/h4&gt;
&lt;p&gt;对数据的进一步处理。包括特征提取(比如将文本或者图片转换成可以用于机器学习的数字)，特征预处理(通过一些函数将数据转换成适合算法模型的特征数据)和特征降维(降低特征个数)。&lt;/p&gt;
&lt;h5 id=&#34;331-特征预处理&#34;&gt;3.3.1 特征预处理&lt;/h5&gt;
&lt;p&gt;将数据转换成机器更好识别，更好处理的数据。当特征数据的单位或者大小相差较大，或者某个特征的方差相比其他的方差大出好几个数量级，这种情况可能这个特征对结果的影响比较大，使得算法无法学习到其他特征。&lt;/p&gt;
&lt;h6 id=&#34;3311-归一化&#34;&gt;3.3.1.1 归一化&lt;/h6&gt;
&lt;p&gt;把原始数据映射到某个区间内，默认0~1。计算公式为：
$$
X&#39; = \frac {x - min}{max - min}\&lt;/p&gt;
&lt;p&gt;X&#39;&#39; = X&#39; * (mx - mi) + mi
$$
上面的公式中，X&#39;&#39;就是归一化处理后的特征值，max和min表示初始特征值的最大值和最小值，mx和mi表示想要将特征值映射到区间的最大值和最小值。&lt;/p&gt;
&lt;p&gt;归一化的时候如果出现一条特征统计不正确，比如有1条数据比其他的大了很多倍或者小了很多倍，这种情况对其他数据的影响很大，所以这种方法鲁棒性较差，只适合精确小数据场景。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#ff79c6&#34;&gt;as&lt;/span&gt; pd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; sklearn.preprocessing &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; MinMaxScaler
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;read_csv(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;./data/dating.txt&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 实例化转化器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;transfer &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; MinMaxScaler(featrue_range&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 将目标列转换到指定区间，这里是3~5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ret_data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; transfer&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;fit_transform(data[[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;列1名称&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;列2名称&amp;#34;&lt;/span&gt;]])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;转化后的数据:&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;, ret_data)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h6 id=&#34;3312-标准化&#34;&gt;3.3.1.2 标准化&lt;/h6&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#ff79c6&#34;&gt;as&lt;/span&gt; pd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; sklearn.preprocessing &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; StandardScaler
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;read_csv(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;./data/dating.txt&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 实例化转化器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;transfer &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; StandardScaler()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 将目标列转标准化&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ret_data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; transfer&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;fit_transform(data[[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;列1名称&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;列2名称&amp;#34;&lt;/span&gt;]])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;转化后的数据:&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;, ret_data)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;每一列的方差为:&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;, transfer&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;var_)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;每一列的平均值为:&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;, transfer&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;mean_)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;第一步就是去均值，将平均值变成0，然后在比上标准差，这样能让所有维度的数相差不大：$X&#39; = \frac{x - avg}{\sigma}$。&lt;/p&gt;</description>
    </item>
    <item>
      <title>3.机器学习算法</title>
      <link>http://localhost:1313/posts/ai/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/ai/3.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;h5 id=&#34;距离度量&#34;&gt;距离度量&lt;/h5&gt;
&lt;p&gt;一些算法会需要距离度量，比如K近邻、SVM、聚类等，距离有4个特性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;非负性：两点的距离不能小于0；&lt;/li&gt;
&lt;li&gt;同一性：两点的距离=0说明时同1个点；&lt;/li&gt;
&lt;li&gt;对称性：x到y的距离时0时，y到x的距离也是0；&lt;/li&gt;
&lt;li&gt;直递性：dist(i,j)&amp;lt;=dist(i,k) + dist(k,j);&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;常见的距离公式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;欧式距离：两个点就是勾股定理，n个点就开根号n；&lt;/li&gt;
&lt;li&gt;曼哈顿距离：曼哈顿距离是当两个点不能练成直线时的距离，计算公式：$\sum_{k=1}^n\vert X_{k}-X_{k-1} \vert$；&lt;/li&gt;
&lt;li&gt;切比雪夫距离：类比于国际象棋中的国王走棋的方式，国王可以在一个步长内向任何方向移动，两点的距离公式为$D(P,Q)=max(\vert x_1−x_2\vert,\vert y_1−y_2\vert,...,\vert x_n−x_{n+1}\vert)$​；&lt;/li&gt;
&lt;li&gt;闵氏距离：闵氏距离是将上面3个变成了1个公式，当p=1的时候是曼哈顿距离，p=2的时候是欧式距离，p&amp;gt;=3的时候是切比雪夫距离&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;1-k近邻算法&#34;&gt;1 K近邻算法&lt;/h3&gt;
&lt;p&gt;根据最近的距离判断类别，最近的样本数据是什么类别，你就是什么类别，这里的样本数量可以取n个。也叫KNN算法。&lt;/p&gt;
&lt;p&gt;求两个坐标的距离使用勾股定理，多维也是一样的。&lt;/p&gt;
&lt;p&gt;比如现有数据：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;电影名&lt;/th&gt;
          &lt;th&gt;搞笑镜头&lt;/th&gt;
          &lt;th&gt;拥抱镜头&lt;/th&gt;
          &lt;th&gt;打斗镜头&lt;/th&gt;
          &lt;th&gt;电影类型&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;功夫熊猫&lt;/td&gt;
          &lt;td&gt;39&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;31&lt;/td&gt;
          &lt;td&gt;喜剧片&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;叶问3&lt;/td&gt;
          &lt;td&gt;3&lt;/td&gt;
          &lt;td&gt;2&lt;/td&gt;
          &lt;td&gt;65&lt;/td&gt;
          &lt;td&gt;动作片&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;二次曝光&lt;/td&gt;
          &lt;td&gt;2&lt;/td&gt;
          &lt;td&gt;3&lt;/td&gt;
          &lt;td&gt;55&lt;/td&gt;
          &lt;td&gt;爱情片&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;代理情人&lt;/td&gt;
          &lt;td&gt;9&lt;/td&gt;
          &lt;td&gt;38&lt;/td&gt;
          &lt;td&gt;2&lt;/td&gt;
          &lt;td&gt;爱情片&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;步步惊心&lt;/td&gt;
          &lt;td&gt;8&lt;/td&gt;
          &lt;td&gt;34&lt;/td&gt;
          &lt;td&gt;17&lt;/td&gt;
          &lt;td&gt;爱情片&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;谍影重重&lt;/td&gt;
          &lt;td&gt;5&lt;/td&gt;
          &lt;td&gt;3&lt;/td&gt;
          &lt;td&gt;57&lt;/td&gt;
          &lt;td&gt;动作片&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;美人鱼&lt;/td&gt;
          &lt;td&gt;21&lt;/td&gt;
          &lt;td&gt;17&lt;/td&gt;
          &lt;td&gt;5&lt;/td&gt;
          &lt;td&gt;喜剧片&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;小鬼当家&lt;/td&gt;
          &lt;td&gt;45&lt;/td&gt;
          &lt;td&gt;2&lt;/td&gt;
          &lt;td&gt;9&lt;/td&gt;
          &lt;td&gt;喜剧片&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;唐人街探案&lt;/td&gt;
          &lt;td&gt;23&lt;/td&gt;
          &lt;td&gt;3&lt;/td&gt;
          &lt;td&gt;17&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;唐人街探案时测试数据，上面的事样本数据，需要判断唐人街探案是什么类型的电影时，就要先求出唐人街探案距离每个电影的距离：&lt;/p&gt;</description>
    </item>
    <item>
      <title>4.tensorFlow</title>
      <link>http://localhost:1313/posts/ai/4.%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/ai/4.%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6/</guid>
      <description>&lt;p&gt;PyTorch和TensorFlow是深度学习框架，但它们也具备科学计算库的特性。&lt;/p&gt;
&lt;h4 id=&#34;tensorflow&#34;&gt;Tensorflow&lt;/h4&gt;
&lt;p&gt;TensorFlow是谷歌的深度学习框架，可以用在计算机视觉、音频处理、推荐系统、自然语言处理等场景。向下支持做的很烂，&lt;strong&gt;现在用的少。&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&#34;一安装&#34;&gt;一、安装&lt;/h5&gt;
&lt;p&gt;mac(m1/m2)安装：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 如果提示Could not find a version that satisfies the requirement tensorflow-macos (from versions: none)升级pip&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python3 -m pip install --upgrade pip
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip3 install tensorflow-macos
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 苹果为支持 M1/M2 芯片上的图形加速，提供的插件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip3 install tensorflow-metal
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;其他版本安装：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# CPU版本&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip3 install tensorflow
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# GPU版本&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip3 install tensorflow-gpu
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;验证安装结果：&lt;/p&gt;</description>
    </item>
    <item>
      <title>5.神经网络</title>
      <link>http://localhost:1313/posts/ai/5.%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/ai/5.%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</guid>
      <description>&lt;p&gt;所有的神经网络都是为了提取特征。&lt;/p&gt;
&lt;p&gt;神经网络就是把多个线性回归和逻辑回归组合到一起。由一个输入层、一个输出层和n个隐藏层组成，第n层的每个神经元和第n-1层的所有神经元相连，第n-1层的输出就是第n层的输入。每个隐藏层有n个神经元，每个神经元都有一个非线性激活函数。&lt;/p&gt;
&lt;p&gt;神经网络的精度高，效果好；但是训练时间长，小数据集上表现不好。他的本质是摆脱人为干预的特征提取(&lt;strong&gt;黑盒&lt;/strong&gt;)，我们只负责输入，查看输出，这就是端对端模型(end-to-end)，深度学习中只有极小值没有极大值。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;正向传播：从输入层--&amp;gt;隐藏层--&amp;gt;输出层的过程，是根据数据损失函数和激活函数&lt;strong&gt;得到模型的输出结果和损失函数的值&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;反向传播：从损失函数开始，逐层向后传播误差(链式法则)，并计算每个参数的梯度的过程，然后用优化器更新权重和偏置，让损失主键减小。&lt;/li&gt;
&lt;li&gt;计算图：描述张量之间运算关系的有向无环图，节点是变量（输入、权重、偏置、激活函数、输出），边是数学运算（加法、乘法、激活函数等）。为了高效计算梯度的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;一损失函数&#34;&gt;一、损失函数&lt;/h3&gt;
&lt;p&gt;也叫代价函数、目标函数、误差函数。默认作用在监督学习的输出层，但是在多任务训练、对抗训练等，损失函数也可以作用在隐藏层或中间层。&lt;/p&gt;
&lt;p&gt;损失函数 = 数据损失 + 正则化惩罚，数据损失就是预测值和真实值的差异。损失函数中一般会带着偏执(常量)，偏置跟输出挂钩，一般几分类就会有几个偏置。&lt;/p&gt;
&lt;p&gt;log函数可以表示预测值为1的时候损失为0，同事预测值越不准损失越大，所以一般数据损失函数都用log表示。&lt;/p&gt;
&lt;p&gt;GPT-4的损失函数中有1.8万亿个权重参数，涉及到生活的很多方面。&lt;/p&gt;
&lt;h4 id=&#34;1-数据损失函数&#34;&gt;1. 数据损失函数&lt;/h4&gt;
&lt;h5 id=&#34;11-分类任务损失函数&#34;&gt;1.1 分类任务损失函数&lt;/h5&gt;
&lt;h6 id=&#34;111-交叉熵损失函数&#34;&gt;1.1.1 交叉熵损失函数&lt;/h6&gt;
&lt;p&gt;多分类的交叉熵：多分类的输出层使用softmax函数，损失公式：$ L = -\frac{1}{N} \sum_{i=1}^{N} \sum_{k=1}^{K} y_{i,k} \cdot \log(\hat{y}&lt;em&gt;{i,k})$，N是样本数量；K是类别数量；$y&lt;/em&gt;{i,k}$ 是第 i 个样本在第 k 个类别上的真实标签（1 表示属于该类别，0 表示不属于）； $\hat{y}_{i,k}$ 是第 i 个样本在第 k 个类别上的预测概率，就是模型输出的预测结果。&lt;/p&gt;
&lt;p&gt;二分类的交叉熵：二分类的输出层使用sigmoid函数，损失公式：$L = -\frac{1}{N} \sum_{i=1}^{N} \Big(y_i \cdot \log(\hat{y}_i) + (1 - y_i) \cdot \log(1 - \hat{y}_i)\Big)$，参数和多酚类一样。&lt;strong&gt;sigmoid函数的趋势是近似平行x轴的，会导致梯度消失&lt;/strong&gt;。&lt;/p&gt;
&lt;h5 id=&#34;12-回归任务损失函数&#34;&gt;1.2 回归任务损失函数&lt;/h5&gt;
&lt;h6 id=&#34;121-mae损失&#34;&gt;1.2.1 MAE损失&lt;/h6&gt;
&lt;p&gt;也叫L1 Loss，以绝对误差作为距离。具有稀疏性，也可以作为正则化添加到其他loss中作为约束。他的梯度在0点不平滑，容易跳过最小值。公式：$L = \frac{1}{N} \sum_{i=1}^{N} \left| y_i - \hat{y}_i \right|$&lt;/p&gt;</description>
    </item>
    <item>
      <title>6.计算机视觉(CV)介绍</title>
      <link>http://localhost:1313/posts/ai/6.%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/ai/6.%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/</guid>
      <description>&lt;p&gt;图像是由长度、宽度、颜色通道组成的矩阵，一般是3个通道RGB，每个通道有多个像素点，像素点的值是0到255，这个数值表示的是亮度，比如0就是最暗-黑色，255是最亮-白色。&lt;/p&gt;
&lt;p&gt;计算机视觉的挑战：部分遮掩(比如模型识别不出来被遮住头的猫)，背景混入(无法识别和背景颜色相似的目标)。&lt;/p&gt;
&lt;h3 id=&#34;一主要流程&#34;&gt;一、主要流程&lt;/h3&gt;
&lt;h4 id=&#34;1-数据采集与预处理data-acquisition--preprocessing&#34;&gt;1. 数据采集与预处理（Data Acquisition &amp;amp; Preprocessing）&lt;/h4&gt;
&lt;p&gt;获取高质量的视觉数据，并进行规范化处理。比如图像/视频采集、数据增强（如翻转、旋转、缩放）、数据标准化（如均值归一化、缩放到 [0,1]）、去噪、去模糊。常用工具OpenCV、Pillow（PIL）、Albumentations。&lt;/p&gt;
&lt;p&gt;常用的开源基准数据集有2种，VOC和COCO，里面包含了一些人、动物、物品等带b标注图片。&lt;/p&gt;
&lt;h4 id=&#34;2-特征提取featrue-extraction--backbone&#34;&gt;2. 特征提取（Featrue Extraction / Backbone）&lt;/h4&gt;
&lt;p&gt;从原始图像中提取有代表性的特征，经典网络VGG、ResNet、MobileNet、Darknet。输出的是高维的特征图。&lt;/p&gt;
&lt;h4 id=&#34;3-特征表示与学习featrue-representation--learning&#34;&gt;3. 特征表示与学习（Featrue Representation &amp;amp; Learning）&lt;/h4&gt;
&lt;p&gt;对特征进行降维或压缩、将特征输入到分类器或检测器中、学习特征与任务目标之间的映射关系。常见模型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分类任务：Softmax 分类器&lt;/li&gt;
&lt;li&gt;检测任务：RPN（Region Proposal Network）&lt;/li&gt;
&lt;li&gt;分割任务：上采样模块（如 U-Net 中的 Decoder）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;4-任务特定头task-specific-heads&#34;&gt;4. 任务特定头（Task-Specific Heads）&lt;/h4&gt;
&lt;p&gt;根据不同任务设计不同的网络头（Head）。常见任务头：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;图像分类：全连接层 + Softmax&lt;/li&gt;
&lt;li&gt;目标检测：边界框回归 + 分类头&lt;/li&gt;
&lt;li&gt;语义分割：像素级分类头&lt;/li&gt;
&lt;li&gt;实例分割：目标检测头 + 分割头（如 Mask R-CNN）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;5-推理与后处理inference--post-processing&#34;&gt;5. 推理与后处理（Inference &amp;amp; Post-processing）&lt;/h4&gt;
&lt;p&gt;将模型的输出转换为可解释的结果，常见后处理方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NMS（非极大值抑制）：去除冗余边界框&lt;/li&gt;
&lt;li&gt;Softmax：转换为类别概率&lt;/li&gt;
&lt;li&gt;阈值化：过滤低置信度的检测结果&lt;/li&gt;
&lt;li&gt;CRF（条件随机场）：优化分割边界&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;51-nms&#34;&gt;5.1 NMS&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;非极大值抑制（Non-Maximum Suppression, NMS）&lt;/strong&gt; 是一种常用于目标检测任务中的后处理技术，主要目的是从多个重叠的候选框（Bounding Boxes）中选择出最佳的框，减少冗余框，确保每个目标只保留一个检测框。流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对所有候选框按&lt;strong&gt;置信度分数&lt;/strong&gt;进行降序排序。&lt;/li&gt;
&lt;li&gt;选择&lt;strong&gt;当前置信度最高的框&lt;/strong&gt;，将其加入保留框列表 &lt;code&gt;Keep&lt;/code&gt; 中。&lt;/li&gt;
&lt;li&gt;计算当前选择的框与&lt;strong&gt;所有剩余框&lt;/strong&gt;之间的IoU。&lt;/li&gt;
&lt;li&gt;对于与当前框 &lt;strong&gt;IoU 大于设定阈值&lt;/strong&gt;（例如 0.5）的其他框，将它们从候选框列表中&lt;strong&gt;移除&lt;/strong&gt;。因为这些高重叠的框很可能指向同一个目标，保留多个会导致冗余。&lt;/li&gt;
&lt;li&gt;从剩余的候选框中，&lt;strong&gt;选择下一个置信度最高的框&lt;/strong&gt;，重复步骤 &lt;strong&gt;2 → 3 → 4&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;如果目标靠的太近可能造成误删&lt;/strong&gt;，改进版有Soft-NMS(调整置信度而不是直接丢弃框)和Multi-Class NMS(针对不同类别分别进行 NMS)。&lt;/p&gt;</description>
    </item>
    <item>
      <title>7.目标检测</title>
      <link>http://localhost:1313/posts/ai/7.%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/ai/7.%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/</guid>
      <description>&lt;p&gt;目标检测首先需要有一个类型的集合，只能检测集合中的类型，并且他会检测出图片中所有属于集合中的&lt;strong&gt;类型和位置&lt;/strong&gt;。坐标可以使用极坐标或者中心点坐标表示。&lt;/p&gt;
&lt;p&gt;模型的评价指标有2种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;IoU(交并比)，检测结果和测试数据真实结果的交集/检测结果和真实结果的并集。&lt;/li&gt;
&lt;li&gt;mAP：IoU没有衡量检测类型准确性的指标，他是用精确率和召回率组成的PR图的面积表示。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;不管是单阶段提交算法还是两阶段提交算法都会产生多个候选框。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;2-两阶段提交算法&#34;&gt;2. 两阶段提交算法&lt;/h4&gt;
&lt;p&gt;相比于单阶段多了一个预选操作，速度慢，效果好，适合离线检测。&lt;/p&gt;
&lt;h5 id=&#34;21-overheat&#34;&gt;2.1 overheat&lt;/h5&gt;
&lt;p&gt;使用固定宽高的矩形区域滑动窗口，将窗口扫描的结果送到神经网络分类和回归。这种类似于穷举，会消耗大量算力，并且他的窗口大小固定，结果不是很准确。&lt;/p&gt;
&lt;h5 id=&#34;22-r-cnn&#34;&gt;2.2 R-CNN&lt;/h5&gt;
&lt;p&gt;引入&lt;strong&gt;区域建议&lt;/strong&gt;概念，将目标检测分为&lt;strong&gt;候选区域提取 → 特征提取 → 分类&lt;/strong&gt;三步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;候选区域提取：使用Selective Search(SS)算法在图像上生成约 2000 个候选区域（Region Proposals）。&lt;/li&gt;
&lt;li&gt;特征提取：将每个候选区域送入 CNN（如 AlexNet）中提取特征。&lt;/li&gt;
&lt;li&gt;分类：将提取的特征送入**SVM（支持向量机）**进行分类。&lt;/li&gt;
&lt;li&gt;边界框回归：使用&lt;strong&gt;回归器&lt;/strong&gt;优化边界框的位置。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;他的分类是传统机器学习而不是神经网络。缺点：每个候选区域都要单独经过CNN处理，速度慢；很多候选区域重叠，特征提取存在重复计算。&lt;/p&gt;
&lt;h5 id=&#34;23-fast-r-cnn&#34;&gt;2.3 fast R-CNN&lt;/h5&gt;
&lt;p&gt;改进点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用全图卷积避免对每个候选框单独卷积，将候选区域映射到特征图上；&lt;/li&gt;
&lt;li&gt;通过 &lt;strong&gt;ROI Pooling&lt;/strong&gt; 将不同大小的候选区域转换为固定大小；&lt;/li&gt;
&lt;li&gt;使用&lt;strong&gt;全连接层&lt;/strong&gt;同时进行&lt;strong&gt;分类&lt;/strong&gt;和&lt;strong&gt;边界框回归&lt;/strong&gt;；&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;24-faster-r-cnn&#34;&gt;2.4 faster R-CNN&lt;/h5&gt;
&lt;p&gt;改进点：使用RPN代替SS生成候选框。他是一个端到端的寻量模型，我们只需要&lt;strong&gt;提供训练数据和对应的标签，调用预定义好的训练脚本即可，不关心模型的细节（如学习率、优化器、损失函数、中间特征层的设计等）。&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&#34;25-mask-rcnn&#34;&gt;2.5 Mask-Rcnn&lt;/h5&gt;
&lt;h4 id=&#34;3-单阶段提交算法&#34;&gt;3. 单阶段提交算法&lt;/h4&gt;
&lt;p&gt;单阶段检测的速度快，精度低，适合实时检测，比如自动驾驶、无人机目标检测等。YOLO和SSD都是端到端的模型。&lt;/p&gt;
&lt;h5 id=&#34;31-yolo&#34;&gt;3.1 YOLO&lt;/h5&gt;
&lt;p&gt;将输入的图片分成n个小格子，每个格子作为中心点，并且给2个尺寸的候选框，然后计算2个候选框的IOU和置信度，首先抛弃置信度过低的候选框，如果候选框没有被抛弃就选择IOU大的候选框进行微调，微调就是调整长宽，让他能够圈住检测的物体。微调的过程就是回归，所以YOLO的核心思想就是计算IOU+回归任务。如果最后的结果中1个点有很多预选框重叠了就采用NMS保留置信度最高的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;V1版本：有很多缺点，因为全连接层要求输入的特征树是固定的，所有V1版本的YOLO要求输入的图像大小是固定的；并且多个物体重叠或者物体过小时很难检测；&lt;/li&gt;
&lt;li&gt;V2版本：舍弃Dropout，每层卷积后增加了Batch Normalization。因为V1使用224 * 224的分辨率进行训练，比较小，V2版本在训练完之后使用448 * 448的图片进行10次微调。V2中先验框的大小使用聚类算法确定，而不是写死的，数量也从2个变成5个。&lt;/li&gt;
&lt;li&gt;V3版本：改进了网络结构，更适合小目标检测，去掉了池化层，通过残差网络实现3种scale，分别对应大、中、小3种目标。&lt;/li&gt;
&lt;li&gt;V4版本：训练数据上增加了一些随机处理，比如翻转，遮盖，马赛克，DropBlock等；使用标签平滑方式(类别不设置成1，比如虽然是狗但是也要设置成0.95的狗+0.05的猫)防止过拟合；使用CIOU代替IOU；增加注意力机制、特征金字塔等；&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;32-ssd&#34;&gt;3.2 SSD&lt;/h5&gt;
&lt;p&gt;使用多尺度特征图进行预测，从不同尺度的特征图中检测不同大小的物体。在多个卷积层上进行预测，每层生成一组边界框和类别置信度。精度比YOLO高。&lt;/p&gt;
&lt;p&gt;YOLO适合实时检测小物体，更适合视频分析、图像分类。&lt;/p&gt;
&lt;h5 id=&#34;33-detr&#34;&gt;3.3 DETR&lt;/h5&gt;
&lt;p&gt;基于transformer的算法，没有NMS，没有预选框。但是训练很慢，而且对输入的特征有限制，不能很大。&lt;/p&gt;
&lt;h5 id=&#34;34-deformabledert&#34;&gt;3.4 DeformableDert&lt;/h5&gt;
&lt;p&gt;解决了DETR的输入特征限制和训练速度问题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>8.自然语言处理-nlp</title>
      <link>http://localhost:1313/posts/ai/8.nlp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/ai/8.nlp/</guid>
      <description>&lt;p&gt;标准数据集GLUE：由纽约大学、华盛顿大学和google联合推出的涵盖11个子任务的NLP数据集。&lt;/p&gt;
&lt;p&gt;文本的标签太多，打不完；文本模型不是聚焦某个场景，更重要的是培养模型的学习能力，自监督更合适；有监督容易过拟合，不能做迁移学习，适合做一些针对性的事，自监督适合解决领域通用的问题。&lt;/p&gt;
&lt;h3 id=&#34;一文本预处理&#34;&gt;一、文本预处理&lt;/h3&gt;
&lt;h4 id=&#34;1-基本方法&#34;&gt;1 基本方法&lt;/h4&gt;
&lt;h5 id=&#34;11-分词&#34;&gt;1.1 分词&lt;/h5&gt;
&lt;p&gt;精确模式：把句子精确的切开，适合文本分析。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; jieba
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;content &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;工信处女干事每月经过下属科室都要亲口交代24口交换机等技术性器件的安装工作&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# cut_all是False表示精确模式&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(jieba&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;lcut(content, cut_all&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;False&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# [&amp;#39;工信处&amp;#39;, &amp;#39;女干事&amp;#39;, &amp;#39;每月&amp;#39;, &amp;#39;经过&amp;#39;, &amp;#39;下属&amp;#39;, &amp;#39;科室&amp;#39;, &amp;#39;都&amp;#39;, &amp;#39;要&amp;#39;, &amp;#39;亲口&amp;#39;, &amp;#39;交代&amp;#39;, &amp;#39;24&amp;#39;, &amp;#39;口&amp;#39;, &amp;#39;交换机&amp;#39;, &amp;#39;等&amp;#39;, &amp;#39;技术性&amp;#39;, &amp;#39;器件&amp;#39;, &amp;#39;的&amp;#39;, &amp;#39;安装&amp;#39;, &amp;#39;工作&amp;#39;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;全模式：把句子中所有可以成词的词语都扫出来，不能消除歧义&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; jieba
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;content &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;工信处女干事每月经过下属科室都要亲口交代24口交换机等技术性器件的安装工作&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# cut_all是False表示精确模式&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(jieba&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;lcut(content, cut_all&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;True&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# [&amp;#39;工信处&amp;#39;, &amp;#39;处女&amp;#39;, &amp;#39;女干事&amp;#39;, &amp;#39;干事&amp;#39;, &amp;#39;每月&amp;#39;, &amp;#39;月经&amp;#39;, &amp;#39;经过&amp;#39;, &amp;#39;下属&amp;#39;, &amp;#39;科室&amp;#39;, &amp;#39;都&amp;#39;, &amp;#39;要&amp;#39;, &amp;#39;亲口&amp;#39;, &amp;#39;口交&amp;#39;, &amp;#39;交代&amp;#39;, &amp;#39;24&amp;#39;, &amp;#39;口交&amp;#39;, &amp;#39;交换&amp;#39;, &amp;#39;交换机&amp;#39;, &amp;#39;换机&amp;#39;, &amp;#39;等&amp;#39;, &amp;#39;技术&amp;#39;, &amp;#39;技术性&amp;#39;, &amp;#39;性器&amp;#39;, &amp;#39;器件&amp;#39;, &amp;#39;的&amp;#39;, &amp;#39;安装&amp;#39;, &amp;#39;安装工&amp;#39;, &amp;#39;装工&amp;#39;, &amp;#39;工作&amp;#39;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;搜索引擎模式：在精确模式的基础上对长词再次进行切分，提高召回率。&lt;/p&gt;</description>
    </item>
    <item>
      <title>9.大模型微调</title>
      <link>http://localhost:1313/posts/ai/9.%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BE%AE%E8%B0%83/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/ai/9.%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BE%AE%E8%B0%83/</guid>
      <description>&lt;p&gt;大语言中的大型主要体现在参数规模和训练数据量，一般参数规模达到1B(10亿)量级才叫大模型，只有达到这个量级才会有机遇Scaling law的涌现现象，涌现现象是大模型的魅力，有点像初中物理学的液态变固态。&lt;/p&gt;
&lt;p&gt;模型的参数数量跟显存占比的计算，以OPT-6.7B举例：OPT-6.7B就是6.7Billion个参数，假设参数的类型是Float16，即每个参数占用16位（2字节）的显存。总显存占用=参数总量×每个参数的显存占用。总内存 = 67亿 * 2 = 134亿字节。转换成GB就是134亿 / 1024 / 1024 / 1024 = 12.5GB的显存。&lt;/p&gt;
&lt;p&gt;使用大显存的GPU加载整个模型可以加快训练速度，部署时也可以提高响应速度，但是可以只使用CPU+内存的方式训练或者部署，只不过这种方式的训练很慢，因为训练时需要大量的矩阵相乘操作。但是使用部署后的模型只是一个前向传播操作，CPU+内存的方式不会比GPU慢很多，除非是有并发量的批量推理，GPU的优势会很明显。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;现在是一个信息过载的时代，搜什么都会出现一堆，大模型工具的使用可以帮助我们筛选出有用的信息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;模型分类：自回归(&lt;code&gt;CAUSAL_LM&lt;/code&gt;，文本生成任务，比如GPT)、序列分类(&lt;code&gt;SEQ_CLS&lt;/code&gt;，情感分析、文本分类)、token级分类(&lt;code&gt;TOKEN_CLS&lt;/code&gt;，命名实体识别NER)、问答任务(&lt;code&gt;QUESTION_ANS&lt;/code&gt;)&lt;/p&gt;
&lt;h4 id=&#34;大模型应用4个阶段&#34;&gt;大模型应用4个阶段&lt;/h4&gt;
&lt;h5 id=&#34;1提示词工程&#34;&gt;1提示词工程&lt;/h5&gt;
&lt;p&gt;面向的是终端用户，大模型时代的沟通手段，通过提示词从大模型挖掘知识。就是如何通过对话框跟大模型更好交流。大模型都是概率模型，很多能力他都没有，比如数学运算，但是我们可做到通过描述让他理解。这也是为什么基于注意力机制的模型很容易回答错误一个描述很复杂的小学数学应用题。&lt;/p&gt;
&lt;h5 id=&#34;2ai智能体ai-agent&#34;&gt;2AI智能体（AI Agent）&lt;/h5&gt;
&lt;p&gt;基于ReAct范式，就是大模型自主判断应该使用哪些工具，比如chatGPT+联网搜索。分为3类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;行动代理（Action agents）：自主决定使用工具，比如OpenAI的Function Call；&lt;/li&gt;
&lt;li&gt;模拟代理（Simulation agents）：通常设计用于模拟角色扮演，在模拟的环境中运行，比如生成式智能体，CAMEL。以后可能会应用在游戏领域，类似于美剧西部世界；&lt;/li&gt;
&lt;li&gt;自主智能体（Autonomous agents）：独立执行实现长期目标，比如Auto-GPT，manus（国产的，好像是Claude套壳）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基于大模型开发应用的开发人员，比如自动客服，虚拟助手。&lt;/p&gt;
&lt;h5 id=&#34;3大模型微调fine-tuning&#34;&gt;3大模型微调（Fine-tuning）&lt;/h5&gt;
&lt;p&gt;在预训练模型的基础上，使用较小的数据集进一步训练来调整模型参数。当有和目标相关的较小的数据集，并且希望模型在这个任务上表现更好的时候使用。&lt;/p&gt;
&lt;p&gt;未来是面向基础模型编程。&lt;/p&gt;
&lt;h5 id=&#34;4预训练技术pre-training&#34;&gt;4预训练技术（Pre-training）&lt;/h5&gt;
&lt;p&gt;使用大量的未标记数据（比如维基百科内容）来训练一个初步的模型，为后续的微调提供基础模型。适合有资源的大厂，有大量的数据集，数据清洗做的好，然后大力出奇迹。&lt;/p&gt;
&lt;p&gt;能自己预训练模型的都是顶级大厂，因为需要的资源实在是太大了，比如LLaMA-65B就需要780G显存。&lt;/p&gt;
&lt;h4 id=&#34;rag&#34;&gt;RAG&lt;/h4&gt;
&lt;p&gt;把我们从外部拿到的数据通过处理之后变成向量数据库中的知识。&lt;/p&gt;
&lt;h3 id=&#34;微调技术路线&#34;&gt;微调技术路线&lt;/h3&gt;
&lt;p&gt;20年之前大家都不知道怎么去做微调，OpenAI发表了一篇论文提出调整prompt，让模型能更好的理解输入也能有很好的效果，再加上几年之后的文生图让prompt被大家熟知。&lt;/p&gt;
&lt;p&gt;但是prompt有个缺点就是相同的prompt换一个模型或者换一个语言描述效果就会差很多，不管是在LangChain里或者在应用的对话框中都有这个问题。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;全量微调（FFT）：所有系数都进行调整，原来的VC相关的模型用的多一点，训练成本高，容易造成灾难性遗忘。&lt;/li&gt;
&lt;li&gt;高效微调（PEFT）：分为有监督微调（SFT）、基于人类反馈的强化学习（RLHF）、基于AI反馈的强化学习（RLAIF）。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;peft&#34;&gt;PEFT&lt;/h4&gt;
&lt;p&gt;高效微调技术：Adapter Tuning(2019 Google) -&amp;gt; Prefix Tuning(2021 Stanford) -&amp;gt; Prompt Tuning(2021 Google) -&amp;gt; P-Tuning V1(2021 TsingHua, MIT) -&amp;gt; P-Tuning V2(2022 TsingHua, BAAI )&lt;/p&gt;
&lt;p&gt;传统的模型微调是很容易的，比如分类的卷积网络中可以直接选择冻结卷积层，训练softmax层直接增加类别，2018年google的bert出来之后模型就已经不是CNN那种神经网络了，都是在叠加transformer的层数，整个模型看起来又宽又高，包括到今天的大语言模型中，哪部分参数干了哪些事也是未知的。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
