<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>敏捷开发 on 王小红的笔记</title>
    <link>http://localhost:1313/categories/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/</link>
    <description>Recent content in 敏捷开发 on 王小红的笔记</description>
    <generator>Hugo -- 0.150.0</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 24 Jun 2021 06:27:35 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1.敏捷开发</title>
      <link>http://localhost:1313/posts/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/ddd/1.%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/</link>
      <pubDate>Thu, 24 Jun 2021 06:27:35 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/ddd/1.%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/</guid>
      <description>&lt;p&gt;传统的瀑布流就是产品经理定义了一个功能非常多，非常完善的产品，然后一堆后端、前端、UI等等进行排期开发，如果这些人包括产品对项目非常了解，每个人都有10年这种类似的产品的开发经验，闭关开发半年或者一年，产出一个成型的完善的产品其实是可能的，一旦对这个产品没有相关经验，开发周期变得很长就会出现一个问题，开发时发现产品的不完善，需要delay，测试时每天会出现几百个bug，需要delay，各种delay原来半年的项目可能变成了1年，还是有一堆bug。&lt;/p&gt;
&lt;p&gt;敏捷开发就是解决传统瀑布流的问题，出现这种问题的原因是工期很长，不可控的因素太多，如果把目标该小并就可以稳定产出，说白了就是拆版本。敏捷开发定义了一套流程和规范，他是一种方法论。主流的框架就是scrum，这个是一种理论框架/方法框架。&lt;/p&gt;
&lt;p&gt;不管是瀑布流还是敏捷开发都需要product backlog（产品功能列表），在国外是项目负责人维护，国内一般没有负责人这种说法，因为国内开发一个软件，一般都是从各个组里抽出几个人组成一个团队，没有真正的leader一说，一般是项目经理维护。&lt;/p&gt;
&lt;h4 id=&#34;敏捷教练&#34;&gt;敏捷教练&lt;/h4&gt;
&lt;p&gt;如果想发挥出来敏捷开发的优势，可能需要配合TDD（测试驱动）、持续集成、持续交付、XP（极限编程）、结对编程等等。一般没玩过敏捷开发的公司可能最开始是玩不转的，有可能会玩崩，所以可以从外部的咨询公司，反正要找一个有经验的人过来指导，这个人就叫敏捷教练。&lt;/p&gt;
&lt;h4 id=&#34;sprint&#34;&gt;sprint&lt;/h4&gt;
&lt;p&gt;冲刺！一般在敏捷开发里，每个月或者几周会有一个大版本，比如每个月要更新一个新功能，前三周可能都是开发这个功能+修复一些bug，每周更新修复的bug，第四周上一个新功能，第四周就叫每个月的冲刺，每个月都叫一个版本冲刺。&lt;/p&gt;
&lt;p&gt;sprint计划会议，就是在最开始产品拿出来需求文档和product backlog之后开评审会议，把backlog拆分成一个一个小版本，这个就叫sprint计划会议，每个冲刺任务还有自己的backlog，然后针对每次冲刺的backlog，预估工期（包括框架搭建、库表设计、coding耗时、单元测试耗时），QA并行的写测试用例，一般会把工期放到燃尽图中，并且时间要精确到小时。&lt;/p&gt;
&lt;h4 id=&#34;站立会和测试驱动&#34;&gt;站立会和测试驱动&lt;/h4&gt;
&lt;p&gt;站立会就是随便找个地方，然后每个人汇报一下昨天都干了什么，今天计划干什么，是否遇到了什么问题，有什么风险，应该如何处理，是否会导致预计之外的变化，是否有新的需求或者缺陷插入，对目前的计划是否有变动。&lt;/p&gt;
&lt;p&gt;测试驱动要求每个发开都需要对开发的每个类的每个方法都需要有最少一个单元测试，有的方法可能需要不能的参数测试不同的边界需要很多个测试用例，还要有一个人专门写集成测试，就是用代码访问之前定义好的接口，查看流程是否可以走通。一般上了测试驱动开发任务最少会多一倍。&lt;/p&gt;
&lt;h3 id=&#34;持续集成和持续交付&#34;&gt;持续集成和持续交付&lt;/h3&gt;
&lt;p&gt;敏捷开发要求一天最少提交一次代码，提交代码之后会有一个类似jenkins的持续集成系统拉取代码，然后通过maven运行里面的单元测试，还有代码的覆盖率，一般要求覆盖率要达到95%以上，所有人都提交了代码之后就会跑一个集成测试的脚本看看controller的返回值是否都符合期望，然后通过持续交付把项目自动化打包、部署到测试环境里去。&lt;/p&gt;
&lt;p&gt;第二天QA会运行写好的测试脚本进行测试，然后把bug提到jira这种缺陷管理系统里去，然后第三天站立会的时候要说明昨天提的bug今天能否修复，是否需要延期。&lt;/p&gt;
&lt;h3 id=&#34;sprint验收&#34;&gt;sprint验收&lt;/h3&gt;
&lt;p&gt;开发+测试+修复bug并行进行可以减少长期项目的不确定性，最终交付一个sprint版本到测试环境，由产品经理验收，如果发现需要改进的地方可以提到下一个sprint中去，然后会开一个会议，包括客户、产品、所有开发进行sprint交付，然后再开一个回顾会议，讨论这次sprint有没有需要改进的地方。&lt;/p&gt;
&lt;h3 id=&#34;三大角色&#34;&gt;三大角色&lt;/h3&gt;
&lt;p&gt;产品负责人：就是产品经理，上跟领导对接，中跟用户对接，下跟开发对接，负责定义产品的sprint和backlog，编写原型图、需求文档（PRD）。&lt;/p&gt;
&lt;p&gt;项目负责人：或者是敏捷教练，scrumMaster，一般就是高P，这个可以选出来，也可以直接由高层指定，hold场子的。&lt;/p&gt;
&lt;p&gt;团队成员：前端，web，后端，UI什么的。&lt;/p&gt;
&lt;h3 id=&#34;user-story&#34;&gt;user story&lt;/h3&gt;
&lt;p&gt;用户故事就是面向用户或者其他系统或者后台的一个功能，可以理解成一个完整的系统功能。每个冲刺包含一些user story，每个user story可以包含一些backlog。&lt;/p&gt;
&lt;h3 id=&#34;开发流程&#34;&gt;开发流程&lt;/h3&gt;
&lt;p&gt;开始之前需要确定一批技术专家，针对项目里用到的技术，防止开发或者线上突然出现源码或者原理级的bug，比如消息丢失，需要有一些这样的人到时候能够指导或者解决，可以是本团队，或者其他团队，或者中间件团队或者别的公司的朋友，或者花钱。&lt;/p&gt;
&lt;p&gt;还需要确定项目负责人需不需要写代码？&lt;/p&gt;
&lt;p&gt;项目负责人每天需要通过站立会盯进度、检查和验收代码，覆盖率是否达标、bug是否达标、预发布环境里的压测、可用性、监控等是否达标，做完了这些基本上没啥时间写代码了，基本上项目负责人80%的时间都是做这个，20%的时间可以写代码，或者做架构设计、方案设计、流程规范设计。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开发之前所有人会进行需求评审，进行sprint拆分，一般可以拆成1周到一个月，如果产品只确定的大功能，很多细节模糊不清，这个时候最好是1周一个冲刺，方便调整和改动。&lt;/li&gt;
&lt;li&gt;确定本次冲刺的需求之后项目负责人需要制定技术层面的sprint和backlog，比如，开发功能、开发测试用例、code review、继承测试、完善文档、完善监控项、stating环境压测等等。&lt;/li&gt;
&lt;li&gt;测试驱动开发，&lt;/li&gt;
&lt;li&gt;自动化集成测试，&lt;/li&gt;
&lt;li&gt;QA环境进行功能测试、性能测试、可用性测试。&lt;/li&gt;
&lt;li&gt;自动交付到staging环境，进行压测。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;没有结对编程，人走了代码就没人接手了，通过结对编程+code review提高代码质量，不怕有人走代码没人接手。&lt;/p&gt;
&lt;p&gt;概念的关系：&lt;/p&gt;
&lt;p&gt;一般一个发布计划就是一个版本，一个发布计划对应多个sprint，一个sprint包含多个用户故事，一个用户故事包含多个backlog。&lt;/p&gt;
&lt;p&gt;每个print结束之后都要有一个总结会，每个人都可以提意见，比如说单侧不标准之类的，这个东西是越来越完善的。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
