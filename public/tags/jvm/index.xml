<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>JVM on 王小红的笔记</title>
    <link>http://localhost:1313/tags/jvm/</link>
    <description>Recent content in JVM on 王小红的笔记</description>
    <generator>Hugo -- 0.150.0</generator>
    <language>zh-CN</language>
    <atom:link href="http://localhost:1313/tags/jvm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>jvm-5.常用工具</title>
      <link>http://localhost:1313/posts/%E5%9F%BA%E7%A1%80/jvm/5.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E5%9F%BA%E7%A1%80/jvm/5.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/</guid>
      <description>&lt;p&gt;这些工具都在java_home/bin目录下，主要分成3类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;商业授权工具：主要是JMC以及他要用到的JFR，用这个需要付费。&lt;/li&gt;
&lt;li&gt;正式支持工具：长期支持，可能会因为版本、平台稍微不同，但是不会突然消失。&lt;/li&gt;
&lt;li&gt;实验性工具：这些工具在说明中被声明成不支持并且是实验性质的，可能会转正也可能会消失。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;jstat&#34;&gt;jstat&lt;/h5&gt;
&lt;p&gt;jstat是用来监视虚拟机各种运行状态信息的命令。命令格式是jstat [option] PID [interval[s|ms]] [count]。比如 jstat -gc 20420 1000 10 ：每过1s打印一次PID是20420的系统的gc信息，打印十次。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://tva1.sinaimg.cn/large/006tNbRwly1gatx2glmk3j30r101ua9z.jpg&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;S0C： From Survivor区大小&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;S1C：To Survivor区大小&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;S0U：From Survivor区使用的内存大小&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;S1U：To Survivor区使用的内存大小&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;EC：Eden区大小&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;EU：Eden区使用的内存大小&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OC：老年代大小&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OU：老年代使用的内存大小&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MC：元数据空间大小&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MU：元数据空间使用大小&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CCSC：压缩类空间大小&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CCSU：压缩类空间使用内存大小&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;YGC：系统运行到现在yongGC的次数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;YGCT：YGC的总耗时（秒）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;FGC：系统运行到现在OldGC的次数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;FGCT：FGC的总耗时（秒）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GCT：所有GC的总耗时（秒）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 查看类加载、卸载、总空间以及装在消耗时间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jstat -class PID
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 堆内存分析&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jstat -gccapacity PID
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 年轻代GC分析，这里的TT和MTT可以看到对象在年轻代存活的年龄和存活的最大年龄&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jstat -gcnew PID
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 年轻代内存分析&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jstat -gcnewcapacity PID
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 老年代GC分析&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jstat -gcold PID
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 老年代内存分析&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jstat -gcoldcapacity PID
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 元数据区内存分析&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jstat -gcmetacapacity PID
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 即时编译过的方法、耗时&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jstat -compiler PID
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h5 id=&#34;jmap&#34;&gt;jmap&lt;/h5&gt;
&lt;p&gt;主要就是用来生成堆的快照。&lt;/p&gt;</description>
    </item>
    <item>
      <title>jvm-6.类文件结构</title>
      <link>http://localhost:1313/posts/%E5%9F%BA%E7%A1%80/jvm/6.%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E5%9F%BA%E7%A1%80/jvm/6.%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</guid>
      <description>&lt;p&gt;编译的结果是字节码而不是机器码实现了“一次编写，到处运行”，而且语言无关性也越来越被重视，设计java的时候就是这么考虑的，所以把Java的规范拆分成《Java语言规范》和《Java虚拟机规范》，2018年graalVM公开之后基本上实现了语言无关性，目前运行在java虚拟机上的语言有Kotlin、Groovy、JRuby、JPython、Scala等等。&lt;/p&gt;
&lt;p&gt;实现平台、语言无关的关键就是虚拟机和编译之后的字节码(就是class文件)，比如javac把java程序编译成class文件、jrubyc把jruby程序编译成class文件。&lt;/p&gt;
&lt;h5 id=&#34;class文件结构&#34;&gt;class文件结构&lt;/h5&gt;
&lt;p&gt;class文件中只有两种数据格式，无符号数和表：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无符号数是基本数据类型，u1、u2、u4、u8分别代表1个字节、2个字节、4个字节和8个字节，无符号数用来描述数字、引用或者字符串；&lt;/li&gt;
&lt;li&gt;表：表就是多个无符号数或者其他表组成的复合数据类型，一般表都以_info结尾，整个class其实就是一张表。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;class中的数据项严格按顺序紧凑的排列，没有任何分隔符&lt;/strong&gt;，如果一个变量需要占用1个字节以上的空间时，按照高位在前的方式分割成多个字节，比如u2类型正常的顺序是11100111 00000001，在class文件中就应该是00000001 11100111。不管是表还是符号，在描述同一个类型但是数量不确定的时候都在前面定义一个变量标记这个同类型的若干个变量的数量，class表中各个数据项：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;名称&lt;/th&gt;
          &lt;th&gt;类型&lt;/th&gt;
          &lt;th&gt;数量&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;magic(魔数)&lt;/td&gt;
          &lt;td&gt;u4&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;minor_version(次版本)&lt;/td&gt;
          &lt;td&gt;u2&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;major_version(主版本)&lt;/td&gt;
          &lt;td&gt;u2&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;constant_pool_count&lt;/td&gt;
          &lt;td&gt;u2&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;constant_pool(常量池)&lt;/td&gt;
          &lt;td&gt;cp_info&lt;/td&gt;
          &lt;td&gt;constant_pool_count - 1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;access_flags(访问标志)&lt;/td&gt;
          &lt;td&gt;u2&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;this_class(类索引)&lt;/td&gt;
          &lt;td&gt;u2&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;super_class(父类索引)&lt;/td&gt;
          &lt;td&gt;u2&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;interfaces_count&lt;/td&gt;
          &lt;td&gt;u2&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;interfaces(接口索引集合)&lt;/td&gt;
          &lt;td&gt;u2&lt;/td&gt;
          &lt;td&gt;interfaces_count&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;fields_count&lt;/td&gt;
          &lt;td&gt;u2&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;fields(字段表集合)&lt;/td&gt;
          &lt;td&gt;field_info&lt;/td&gt;
          &lt;td&gt;fields_count&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;methods_count&lt;/td&gt;
          &lt;td&gt;u2&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;methods(方法表集合)&lt;/td&gt;
          &lt;td&gt;method_info&lt;/td&gt;
          &lt;td&gt;methods_count&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;attributes_count&lt;/td&gt;
          &lt;td&gt;u2&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;attributes(属性表集合)&lt;/td&gt;
          &lt;td&gt;attribute_info&lt;/td&gt;
          &lt;td&gt;attributes_count&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h6 id=&#34;1魔数&#34;&gt;1.魔数&lt;/h6&gt;
&lt;p&gt;每个class的头4个字节是魔数，他的作用是确定这个文件能不能被虚拟机接受，class的文件魔数的16进制是0xCAFEBABE(咖啡宝贝)，大部分文件都有魔数，比如图片。&lt;/p&gt;
&lt;h6 id=&#34;2版本&#34;&gt;2.版本&lt;/h6&gt;
&lt;p&gt;魔数后4个字节是版本，第5、6个字节是次版本，次版本号是65535时表示技术预览版功能特性，这样虚拟机在加载类文件的时候能够区分出来。&lt;/p&gt;
&lt;p&gt;主版本从45开始，之后每个大版本号递增，比如JDK13的主版本号就是57。《Java虚拟机规范》要求虚拟机必须拒绝执行超过其主版本号的class文件，就是说JDK7不能执行JDK8编译之后的class。&lt;/p&gt;
&lt;h6 id=&#34;3常量池&#34;&gt;3.常量池&lt;/h6&gt;
&lt;p&gt;主版本号后面紧跟着常量池，由于常量池中元素个数不确定所以在入口放了一个u2的数据表示常量池容量，&lt;strong&gt;class中只有这个集合类型的索引是从1开始的&lt;/strong&gt;，比如constant_pool_count是22，那么常量池的数量就是21，设计的时候考虑到常量池的0有特殊意义。&lt;/p&gt;
&lt;p&gt;常量池中的常量分成两类，一类是字面量，类似于Java里的常量，比如字符串、final修饰的变量等，另一类是符号引用，符号引用包括下面几类：&lt;/p&gt;</description>
    </item>
    <item>
      <title>jvm-7.类加载机制</title>
      <link>http://localhost:1313/posts/%E5%9F%BA%E7%A1%80/jvm/7.%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E5%9F%BA%E7%A1%80/jvm/7.%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</guid>
      <description>&lt;h3 id=&#34;生命周期&#34;&gt;生命周期：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;加载：通过虚拟机内置的类加载器或者自定义的类加载器(重写一个类加载器的findClass或者loadClass方法)把字节流加载到内存中。这个阶段干3件事：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.通过类的全限定名获取定义这个类的二进制字节流，这个阶段是扩展性最强的阶段，很多技术都建立在这个阶段，比如从jar包或者war包读取二进制、从网络中读取、动态代理的运行时计算生成、其他文件生成，比如jsp、从加密文件中获取，反编译的保护措施；&lt;/li&gt;
&lt;li&gt;把字节流转换成方法区需要的存储结构；&lt;/li&gt;
&lt;li&gt;在堆中生成一个代表这个类的对象(Class对象)，作为这个类的数据访问入口；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;验证：java本身是相对C更安全的语言，如果访问数组边界外的数据、类型转换错误这种编译的时候就会报错，但是class文件不一定只能由源码编译而来，比如直接篡改class文件，所以在加载到内存中之后还需要在校验一下，大概就是验证文件格式、元数据、语法、符号引用这些。&lt;strong&gt;文件格式验证和加载是交叉进行的，就是说加载的时候会把一部分已经加载的二进制先拿去验证文件格式&lt;/strong&gt;；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;准备：这个阶段会把类中定义的静态变量分配内存并设置初始值，这写变量在JDK7之后会随着class对象一起放在堆中，因为hotspot没有方法区的物理分区，&lt;strong&gt;这个阶段不会给实例变量分配内存，实例对象会在实例化的时候分配&lt;/strong&gt;，基础数据类型除了boolean的初始值都是0，boolean的初始值是false，reference是null。如果静态变量被final修饰，不会赋值初始值，直接赋真实值，因为&lt;strong&gt;final修饰的变量编译的时候属性表会生成ConstantValue属性，而没有final修饰的静态变量编译时把赋值操作放到了编译器生成的构造方法中&lt;/strong&gt;；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解析：把符号引用替换为直接引用，符号引用就是描述目标的一个字符串，直接引用才是指向内存地址的指针或者句柄，针对的是类或者接口、字段、方法。什么时候解析并没有明确的规定，虚拟机可以在准备之后就解析，也可以在遇见getfield、instanceof这些指令时在解析；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;初始化：验证、准备、解析都是虚拟机主导的，没有扩展的空间，初始化才会执行类中的程序代码。说白了这步就是执行类的clinit方法，他和构造方法不一样，他不需要显示调用父类clinit方法，虚拟机会保证父类clinit方法先执行，也就是说第一个被执行的clinit方法一定是Object，clinit方法是由编译器根据变量的赋值、静态代码块操作合并生成的；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;卸载；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;验证、准备解析合到一起叫做链接(Linking)，其中加载、验证、准备、初始化的顺序是确定的，也就是初始化完毕，一定是加载、验证、准备好了的，但是不一定会解析，某些情况下解析会出现在初始化阶段之后，这么做是为了&lt;strong&gt;动态绑定&lt;/strong&gt;。前5个步骤叫做类加载过程。&lt;/p&gt;
&lt;p&gt;《Java虚拟机规范》没有约束什么时候需要加载，但是他规定了有6中情况必须要初始化(那么加载、验证、准备自然需要再次之前开始)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;遇到new、getstatic、putstatic、invokestatic四条字节码指令时如果类没有初始化，需要初始化，比如使用new关键字实例化对象、读取或者设置非final修饰的字段、调用静态方法；&lt;/li&gt;
&lt;li&gt;使用reflect包的方法进行反射调用的时候，如果类没有初始化；&lt;/li&gt;
&lt;li&gt;初始化类时，如果父类没有初始化，需要先初始化父类。&lt;strong&gt;但是接口不需要，接口是在用到父类的时候才会进行初始化&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;虚拟机启动的时候虚拟机会初始化用户指定的主类；&lt;/li&gt;
&lt;li&gt;使用jdk7新加入的动态语言支持时，如果MethodHandle实例最后的解析结果是RES_getStatic、RES_putstatic、RES_invokestatic、RES_newinvokespecial四种类型的方法句柄、并且这个方法句柄对应的类没有初始化；&lt;/li&gt;
&lt;li&gt;使用了jdk8新加入的default修饰的接口，如果实现类发生了初始化，那么接口需要在实现类之前被初始化；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只有这6中情况会导致类的初始化，叫做主动引用。其余情况不会类的初始化叫被动引用，被动引用举例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;SuperClass&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;static&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#50fa7b&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#50fa7b&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;SuperClass init&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; staic &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; value &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; 123;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;SubClass&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;extends&lt;/span&gt; SuperClass {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;static&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#50fa7b&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#50fa7b&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;SubClass init&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;final&lt;/span&gt; String HELLOWORLD &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;main&lt;/span&gt;(String&lt;span style=&#34;color:#ff79c6&#34;&gt;[]&lt;/span&gt; args) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// 被动引用：通过子类引用父类的静态字段&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#50fa7b&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#50fa7b&#34;&gt;println&lt;/span&gt;(SubClass.&lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// 被动引用：通过数组定义引用类&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    SuperClass&lt;span style=&#34;color:#ff79c6&#34;&gt;[]&lt;/span&gt; sca &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; SuperClass&lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;10&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// 被动引用：通过类引用类的常量，因为常量在类的常量池中，可以直接拿出来&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// 这里有个概念叫常量传播优化，编译的时候会把SubClass.HELLOWORLD的值存储到引用这个变量的常量池中&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#50fa7b&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#50fa7b&#34;&gt;println&lt;/span&gt;(SubClass.&lt;span style=&#34;color:#50fa7b&#34;&gt;HELLOWORLD&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;类加载器&#34;&gt;类加载器：&lt;/h3&gt;
&lt;p&gt;根据全限定名获取描述该类的二进制字节流的代码叫做类加载器。对于任何一个类，必须要由加载他的类加载器和类本身才能确定唯一性，也就是说equals、isAssignableFrom、instanceof这些方法比较的结果。&lt;/p&gt;</description>
    </item>
    <item>
      <title>jvm-8.即时编译器</title>
      <link>http://localhost:1313/posts/%E5%9F%BA%E7%A1%80/jvm/8.%E5%8D%B3%E6%97%B6%E7%BC%96%E8%AF%91%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E5%9F%BA%E7%A1%80/jvm/8.%E5%8D%B3%E6%97%B6%E7%BC%96%E8%AF%91%E5%99%A8/</guid>
      <description>&lt;p&gt;Java程序最初都是通过解释器进行解释执行的，当虚拟机发现某个方法或者代码块运行的特别频繁，就会把这些代码认定为热点代码，为了提高热点代码的执行效率，虚拟机会把热点代码编译为本地机器码，并且尽可能的进行优化，完成这个任务的编译器被称为即时编译器。&lt;/p&gt;
&lt;p&gt;HotSpot虚拟机内置了2、3个即时编译器，时间最久的两个是客户端编译器(Client Complier)和服务端编译器(Server Complier)，也被简称为C1、C2，第三个是Java10出现的为了代替C2的Graal编译器，目前还在实验阶段。&lt;/p&gt;
&lt;h5 id=&#34;分层编译&#34;&gt;分层编译&lt;/h5&gt;
&lt;p&gt;在分层编译模式出现之前，HotSpot虚拟机采用解释器和即时编译搭配的工作方式，使用哪个即时编译器取决于虚拟机运行的模式，HotSpot会根据宿主机器硬件性能和自身版本选择合适的运行模式，也可以使用**-server&lt;strong&gt;或者&lt;/strong&gt;-client&lt;strong&gt;参数强制指定虚拟机运行在客户端模式还是服务端模式。默认情况下虚拟机采用混合模式(Mixed Mode)，可以使用&lt;/strong&gt;-Xint&lt;strong&gt;强制虚拟机运行于解释模式，这个时候即时编译器完全不介入，或者使用&lt;/strong&gt;-Xcomp**强制虚拟机运行于编译模式，这个时候就优先使用编译器方式运行，编译器无法运行的时候解释器才介入。&lt;/p&gt;
&lt;p&gt;因为即时编译编译代码需要占用程序运行时间，尤其是优化部分，优化的成都越高，花的时间就越长，而且解释器还要替编译器收集监控信息，为了平衡运行效率和启动响应速度，JDK7之后出现了分层编译策略，并且作为默认的编译策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0层：纯解释执行，并且不需要开启监控。&lt;/li&gt;
&lt;li&gt;1层：使用客户端将字节码编译成本地机器码，不需要开启监控。&lt;/li&gt;
&lt;li&gt;2层：使用客户端编译器，仅开启方法、回边(从方法边界往回跳转)次数统计等监控。&lt;/li&gt;
&lt;li&gt;3层：使用客户端编译器，开启全部统计，比如分支跳转。&lt;/li&gt;
&lt;li&gt;4层：使用服务端编译器。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体使用多少层也是虚拟机自己决定的。&lt;/p&gt;
&lt;h5 id=&#34;编译触发条件&#34;&gt;编译触发条件&lt;/h5&gt;
&lt;p&gt;热点代码主要分成两类，这两类编译的对象都是整个方法体：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;被多次调用的方法&lt;/li&gt;
&lt;li&gt;被多次执行的循环体&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;1栈上替换&#34;&gt;1.栈上替换&lt;/h6&gt;
&lt;p&gt;统计循环体的调用次数时，由于统计的是方法内的代码块，所以要在方法的执行过程中进行统计，如果发现调用次数达到热点的阈值就会进行及时编译，但是编译的对象是整个方法，所以这种情况可能会导致方法的栈针还在栈上就被替换了。&lt;/p&gt;
&lt;h6 id=&#34;2热点探测判定方式&#34;&gt;2.热点探测判定方式&lt;/h6&gt;
&lt;p&gt;热点探测就是判定代码是不是需要触发即时编译，进行热点探测有两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;采样热点探测：虚拟机周期性的检查所有线程的调用栈顶，如果发现某个方法经常出现在这个栈顶，那这个方法就是热点方法，这样做就是效率高，但是不准，比如线程阻塞就会影响判断。&lt;/li&gt;
&lt;li&gt;计数器的热点探测：虚拟机为每个方法甚至是代码块建立计数器，统计代码执行次数，这种方式更准但是实现麻烦。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;J9使用的是采样，HotSpot使用的是计数器。使用参数**-XX:CompileThreshold**设置方法计数器的阈值，默认客户端是1500次，服务端10000次，当方法被调用的时候虚拟机先检查这个方法有没有被即时编译过，如果没有，方法的计数器+1，如果方法的调用+回边次数达到阈值就交给即时编译器编译，即时编译是异步的，这个时候还是会解释执行，当即时编译结束后会把方法的入口地址替换。&lt;/p&gt;
&lt;p&gt;统计的方法被调用次数并不是绝对的，统计的是某个时间段内的，如果超过了时间限度，调用次数会减半，这个过程成为计数器的热度衰减，这段时间成为半衰周期，&lt;strong&gt;热度衰减的动作是在垃圾回收时顺便进行的&lt;/strong&gt;。使用**-XX:UseCounterDecay&lt;strong&gt;关闭热度衰减，还可以使用&lt;/strong&gt;-XX:CounterHalfLifeTime**设置半衰周期，单位是s。&lt;/p&gt;
&lt;p&gt;回边的热点探测和方法的差不多，他计算阈值的方式更复杂，而且当回边计数器达到阈值时，会把方法计数器的统计数量也改成移出状态，其他的都差不多。&lt;/p&gt;</description>
    </item>
    <item>
      <title>jvm-9.arthas</title>
      <link>http://localhost:1313/posts/%E5%9F%BA%E7%A1%80/jvm/9.arthas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E5%9F%BA%E7%A1%80/jvm/9.arthas/</guid>
      <description>&lt;h5 id=&#34;1定位&#34;&gt;1.定位&lt;/h5&gt;
&lt;p&gt;他的定位是监控、排查故障以及性能优化。&lt;/p&gt;
&lt;h5 id=&#34;2用法&#34;&gt;2.用法&lt;/h5&gt;
&lt;h6 id=&#34;a启动&#34;&gt;a.启动&lt;/h6&gt;
&lt;p&gt;启动方式有两种，第一种下载jar包[https://arthas.aliyun.com/arthas-boot.jar]，下载完直接使用jar包的方式启动：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# telnet-port 指定arthas监听的telnet端口，用来和arthas shell通信&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# -1表示不监听，0表示随机&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 相关配置在arthas.properties里&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;java -jar arthas-boot.jar --telnet-port &lt;span style=&#34;color:#bd93f9&#34;&gt;4659&lt;/span&gt; &amp;lt;pid&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;启动之后可以看到监听端口&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;arthas启动成功&#34; loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/wangxiaohong123/p-bed/main/uPic/arthas%E5%90%AF%E5%8A%A8%E6%88%90%E5%8A%9F.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;第二种下载arthas远程客户端(启动远程客户端需要先安装telnet)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -L https://arthas.aliyun.com/install.sh | sh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 启动并指定监听进程的ip和端口，这里设置的是Web Console页面的ip和端口&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./as.sh --target-ip 127.0.0.1 --target-port &lt;span style=&#34;color:#bd93f9&#34;&gt;8888&lt;/span&gt; &amp;lt;pid&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;不管哪种方式启动，如果启动时没有指定进程id，会列出所有java进程：&lt;/p&gt;</description>
    </item>
    <item>
      <title>jvm-java历史</title>
      <link>http://localhost:1313/posts/%E5%9F%BA%E7%A1%80/jvm/1.java%E5%8E%86%E5%8F%B2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E5%9F%BA%E7%A1%80/jvm/1.java%E5%8E%86%E5%8F%B2/</guid>
      <description>&lt;p&gt;从业务领域划分java，可以分成4部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;java card：支持在小内存设备上运行的小程序；&lt;/li&gt;
&lt;li&gt;java ME：支持在手机、PDA等终端上运行的移动程序，之前叫J2ME，提供部分java API；&lt;/li&gt;
&lt;li&gt;java SE：在桌面运行的程序，之前叫J2SE，提供完整的java API；&lt;/li&gt;
&lt;li&gt;java EE：支持多层架构的企业应用(比如ERP)，之前叫J2EE，他是在java SE的基础上做了大量的补充和一些部署支持；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;java SE的核心api都是以java.*开头，java EE的扩展之前以javax.*开头，后来一些扩展也进入了核心包，所以核心包也有部分api是以javax开头的。&lt;/p&gt;
&lt;h5 id=&#34;jdk发展史&#34;&gt;JDK发展史&lt;/h5&gt;
&lt;p&gt;1991年4月James Gosling启动了绿色计划，这个计划最开始是要开发一个在电子产品(机顶盒、冰箱等)上通用的架构，产品叫Oak，就是Java的前身，但是在市场上并没有普及，1995年Oak改名叫Java，在SunWorld大会上发布Java1.0，并且提出Write One，Run Anywhere的口号，1996年1月的时候JDK1.0发布，这个时候Java才有了第一个正式版本的运行环境，这个时候JDK里面只有一个纯解释执行的虚拟机(Sun Classic VM)。&lt;/p&gt;
&lt;p&gt;到1996年4月就有8万多网站使用java实现，在同年5月底Sun在旧金山举行第一次JavaOne大会，从此javaOne成为全世界数百万的Java工程师每年一度的技术盛会。&lt;/p&gt;
&lt;p&gt;97年2月JDK1.1发布，增加JDBC、RMI、JavaBeans，还有一些语法比如内部类、反射等。&lt;/p&gt;
&lt;p&gt;98年12月JDK1.2发布，这是个里程碑的版本，在这个版本中Java体系分成3个方向，J2ME、J2SE和J2EE。也是在这个版本中第一次内置了JIT编译器，这个版本里并存了3个虚拟机，classic VM、HotSpot VM和Exact VM，后两个虚拟机内置JIT，classic VM需要外挂。Collections集合类也是在这个版本发布的。&lt;/p&gt;
&lt;p&gt;HotSpot是一家Longview Technologies的小公司开发，97年被Sun收购，HotSpot是从1.3之后版本的默认虚拟机。&lt;/p&gt;
&lt;p&gt;2000年JDK1.3发布，这个版本更新的较少，都是一些类库比如Timer API，更多的的是改进Java 2D，但是从1.3开始Sun保持每2年更新一个JDK主版本，以动物命名，小的修复版本用昆虫命名。&lt;/p&gt;
&lt;p&gt;2002年JDK1.4版本发布，这个是java真正走向成熟的版本，新增了很多特性，比如正则、异常链、NIO、日之类、XML解析器等。很多公司都有参与或者自己实现的独立的JDK1.4版本，比如IBM。现在也有很多的应用框架比如Spring、status可以运行在1.4上。2002年.Net发布了。&lt;/p&gt;
&lt;p&gt;2004年JDK1.5版本发布，这个版本在语法的易用性上有了很大的改进，比如泛型、动态注解、可变长参数等。这个版本还改进了内存模型，提供了并发包。&lt;/p&gt;
&lt;p&gt;2006年JDK1.6版本发布，这个版本取消了J2EE这种命名，改成Java EE6。这个版本对虚拟机做了大量改进，比如锁与同步、垃圾回收、类加载等方面的算法。也是在06年11月的JavaOne大会上，Sun宣布将java开源，并建立Open JDK组织对源码进行独立管理。&lt;/p&gt;
&lt;p&gt;JDK1.6发布后没有保持2年一个大版本的速度，直到09年才发布了JDK1.7，而且也不是完整的1.7，在1.7中一个规划了10个里程碑，计划在2010年9月结束，2009年2月只是第一个里程碑，但是Sun那两年过的贼差，导致1.7一直跳票，09年4月Oracle收购Sun，在Oracle收购Sun之后，大量裁剪1.7的预定目标，比如lambda、Jigsaw(虚拟机模块化支持)和Coin(语言细节进化)放到了1.8中，最后1.7就加了个G1(发布后一直是Experimental状态，直到2012年4月才转正)，又升级了下类加载架构。&lt;/p&gt;
&lt;p&gt;现在只是Java的商标贵Oracle，java语言不属于任何公司，由JCP组织管理，但是JCP主要就是Sun公司领导的。也是从1.7开始JDK的发布一直在跳票。&lt;/p&gt;
&lt;h5 id=&#34;虚拟机发展史&#34;&gt;虚拟机发展史&lt;/h5&gt;
&lt;p&gt;Classic VM是历史上第一个商用的java虚拟机，这个时候只能用纯解释器执行代码，如果要用JIT，需要外挂，但是编译器和解释器不能相互配合，意思是尽管使用了JIT，JIT需要对每行代码都进行编译，不管执行的频率是否有编译的价值，在加上需要考虑程序的响应时间，这写编译器不敢使用耗时过高的优化技术，所以这个时候使用了JIT但是效率也比C/C++慢很多，所以那时候都说Java慢。&lt;/p&gt;
&lt;p&gt;在JDK1.2的时候发部过Exact VM，他提供了更准确的内存管理，比如内存地址是指针还是真正的变量，这样有利于GC，哪怕对象被移动也不应判断。但是他马上就被HotSpot取代了，在1.3的时候HotSpot变成了JDK的默认虚拟机，1.4的时候classic VM变成历史。&lt;/p&gt;
&lt;p&gt;HotSpot VM通过执行计数器找出最具有编译价值的代码，通过JIT以方法为单位进行编译，如果一个方法被频繁调用或者方法中有效循环次数很多，就会触发标准编译和OSR(栈上替换)操作，通过编译器和解释器配合工作。&lt;/p&gt;
&lt;p&gt;Oracle收购Sun和BEA公司之后打算把两家的虚拟机合并，既有JRockit的垃圾回收器又有HotSpot的JIT和混合时的运行系统。&lt;/p&gt;
&lt;p&gt;Sun公司的其他虚拟机：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;KVM：强调轻量、简单、高度可移植，之前在手机平台上使用。&lt;/li&gt;
&lt;li&gt;CDC/CLDC HotSpot Implementation：他是运行Java ME的。&lt;/li&gt;
&lt;li&gt;Squawk VM：之前用在Java Card上。&lt;/li&gt;
&lt;li&gt;JavaInJava：这是个实验的虚拟机。&lt;/li&gt;
&lt;li&gt;MaxIne VM：不了解。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;和HotSpot类似的虚拟机还有BEA的JRockit VM和IBM的J9 VM。&lt;/p&gt;
&lt;p&gt;Apache的Harmony不能叫java虚拟机，因为他没通过TCK认证(如果一个公司要求自己的运行平台兼容java语言就必须通过TCK认证)，但是Sun不给Apache认证，后来Apache一生气就退出JCP了，在加上Open JDK的诞生，导致IBM也抛弃Apache加入OpenJDK的开发，虽然Harmony没有被商业使用，但是他的很多代码被引到了INM的JDK7和Google的Android SDK中，Android燃Java真正走进了移动设备领域，只是不是Sun计划的Java ME那条路。Android用的是Dalvik VM，他不是一个Java虚拟机，没有遵守java虚拟机规范，所以他不能执行class文件，而且是基于寄存器而不是栈架构，但是class文件可以转成dex文件被Dalvik执行，也兼容大部分的Java API，后来Android自己也出了个即时编译器。&lt;/p&gt;</description>
    </item>
    <item>
      <title>jvm-内存区域</title>
      <link>http://localhost:1313/posts/%E5%9F%BA%E7%A1%80/jvm/2.%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E5%9F%BA%E7%A1%80/jvm/2.%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/</guid>
      <description>&lt;p&gt;Java虚拟机规范规定jvm运行时数据区应该包括方法区、堆、虚拟机栈、本地方法栈、程序计数器。其中程序计数器、虚拟机栈和本地方法栈是线程私有的，堆和方法区是所有线程共享的。&lt;/p&gt;
&lt;h3 id=&#34;内存区域&#34;&gt;内存区域&lt;/h3&gt;
&lt;h5 id=&#34;1-程序计数器&#34;&gt;1 程序计数器&lt;/h5&gt;
&lt;p&gt;他是当前线程执行的字节码行号指示器，占用内存较小，字节码解释器通过改变程序计数器的值来选取下一条需要执行的字节码指令，比如分支、循环、跳转、异常都需要这个计数器来完成。在单核CPU进行多线程切换时，在切换后需要恢复到正确的执行位置也要依赖这个计数器。&lt;/p&gt;
&lt;p&gt;如果执行的是java方法，计数器记录的是正在执行的虚拟机字节码指令的地址，如果是本地方法(Native)，计数器的值就是空，所以我猜执行本地方法的时候不能进行线程切换。程序计数器是唯一一个没有OOM情况的区域。&lt;/p&gt;
&lt;h5 id=&#34;2-虚拟机栈&#34;&gt;2 虚拟机栈&lt;/h5&gt;
&lt;p&gt;虚拟机栈是描述java方法执行的线程内存模型，每个方法执行的时候会创建一个栈针，&lt;strong&gt;栈针用来存储局部变量表、操作数栈、动态连接、方法出口等信息&lt;/strong&gt;，每个方法从被调用到执行完毕的过程对应着一个栈针的入栈到出栈的过程。&lt;strong&gt;大部分情况下说得jvm中的栈指的是虚拟机栈中的栈针的局部变量表&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;局部变量表里放的是编译期间可知的各种基础数据类型、对象引用(对象引用并不是对象本身，可能是一个指向对象起始地址的指针，也可能是指向一个代表对象句柄或者其他和这个对象相关的位置)和returnAddress类型(指向一条字节码指令的地址)。&lt;/p&gt;
&lt;p&gt;这些对象在局部变量表中以局部变量槽(slot)来表示，64位长度的long和double占用两个槽，其他的占用1个槽。所以当进去方法时，需要创建多大的局部变量表是确定的了。&lt;/p&gt;
&lt;p&gt;如果线程请求的栈深度超过虚拟机允许的深度会抛出StackOverflowError；当虚拟机栈容量可以扩展时，只会出现扩展到无法申请内存，然后抛出OutOfMemoryError异常，HotSpot虚拟机是不能扩展虚拟机栈的，所以不会因为虚拟机栈无法扩展导致OOM。&lt;/p&gt;
&lt;h5 id=&#34;3-本地方法栈&#34;&gt;3 本地方法栈&lt;/h5&gt;
&lt;p&gt;本地方法栈和虚拟栈的作用非常相似，虚拟机栈执行的是java方法，也就是字节码服务，本地方法栈执行的是本地Native方法，而且在《java虚拟机规范》中没有强制规定本地方法栈的语言、使用方式、数据结构等，所以每个虚拟机实现的方式都不一样，比如Hot Spot中把虚拟机栈和本地方法栈合二为一了。&lt;/p&gt;
&lt;h5 id=&#34;4-堆&#34;&gt;4 堆&lt;/h5&gt;
&lt;p&gt;堆是所有线程共享的空间，堆里面也有一些线程私有的分配缓冲区(Thread Local Allocation Buffer，TLAB)，这个区域是为了对象分配的效率，在高并发的情况下分配堆内存可能会出现两个对象被分配到了同一块内存，解决这个问题有两种方案：一种是CAS不断重试，另外一种就是TLAB，具体那种方案通过**-XX:+/-UseTLAB**参数决定。&lt;/p&gt;
&lt;p&gt;堆内存的年轻代、老年代、Eden区……这种分代设计时为了让新生代、老年代收集器搭配工作设计的，但是随着G1的出现之后，这种对于堆的说法仅限分代收集器了。&lt;/p&gt;
&lt;p&gt;堆中存放了几乎所有的对象实例，为什么是几乎？不管以后有没有值类型，就现在来说栈上分配、标量替换让对象都在堆中分配变得不是那么绝对了。主流的虚拟机的栈内存都是可扩展的，就是设置-Xmx和-Xms参数，并且堆可以在不连续的内存空间中，但是对于大对象，为了存储高效可能要求连续的内存空间。&lt;/p&gt;
&lt;h5 id=&#34;5-方法区&#34;&gt;5 方法区&lt;/h5&gt;
&lt;p&gt;方法区也是线程共享的内存区域，它存储的是&lt;strong&gt;被虚拟机加载的类型信息、常量、静态常量、即时编译器编译后的代码缓存&lt;/strong&gt;，《Java虚拟机规范》中把方法区描述成堆的一个逻辑部分，但是他又有个别名叫“非堆(Non-Heap)”，目的是和堆区分开。&lt;/p&gt;
&lt;p&gt;永久代和方法区并不是等价的，在Java8之前，HotSpot的设计团队把收集器的分代设计扩展到了方法区，从而出现了永久代这个概念，新生代、老年代、永久代听起来是不是很顺耳，可以说在Java8之前，HotSpot虚拟机使用永久代来实现方法区，目的就是方便管理方法区的内存。&lt;/p&gt;
&lt;p&gt;因为永久代的内存是有上限(-XX:MaxPermSize)的，这就导致了HotSpot要比JRockit更容易内存溢出，当时Oracle收购BEA之后想把JRockit和HotSpot合二为一但是因为他俩对方法区的实现差太多了，所以合并失败。&lt;/p&gt;
&lt;p&gt;在JDK7的时候，HotSpot把原来永久代中的常量池、静态变量等放到了堆中，到了JDK8，HotSpot彻底放弃永久代，采用在本地内存中实现的元数据空间(Meta-space)来代替，把JDK7剩下的类型信息放到元空间中。方法区也会抛出OOM。&lt;/p&gt;
&lt;h5 id=&#34;6-运行时常量池&#34;&gt;6 运行时常量池&lt;/h5&gt;
&lt;p&gt;他其实是方法区的一部分，因为它存在于class文件中以常量池表的方式，class文件除了常量池表还有版本、字段、方法、接口描述等信息。常量池表存储的是编译时期生成的字面量和符号引用，在类加载后放到方法区的运行时常量池中，运行时常量池中是具有动态性的，就是说运行期间可以加入新的常量，比如String的intern()方法。会抛出OOM。&lt;/p&gt;
&lt;h5 id=&#34;7-直接内存&#34;&gt;7 直接内存&lt;/h5&gt;
&lt;p&gt;直接内存并不是jvm运行时数据区的一部分，也不是《Java虚拟机规范》中定义的内存区域，在JDK1.4的时候加入了NIO，他是基于通道(channel)和缓冲区(buffer)的I/O方式，直接调用Native函数分配堆外内存，然后在堆内存中有一个DirectByteBuffer对象引用这个堆外内存，这样可以避免Native内存和Java堆之间来回复制对象。它主要是收到本机总内存(物理内存、SWAP分区等)的影响也会抛出OOM。&lt;/p&gt;
&lt;h3 id=&#34;oom&#34;&gt;OOM&lt;/h3&gt;
&lt;h5 id=&#34;元数据空间oom&#34;&gt;元数据空间OOM&lt;/h5&gt;
&lt;p&gt;正常生产环境的元数据空间配置128m或者256m就够用了，如果运行一段时间后元数据空间导致的OOM，原因就是不断的创建类，导致fullGC也无法回收掉动态创建的类，所以使用动态代理模拟元数据空间OOM：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;OomMat&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;main&lt;/span&gt;(String&lt;span style=&#34;color:#ff79c6&#34;&gt;[]&lt;/span&gt; args){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd&#34;&gt;long&lt;/span&gt; counter &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; 0;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Enhancer enhancer &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Enhancer();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            enhancer.&lt;span style=&#34;color:#50fa7b&#34;&gt;setSuperclass&lt;/span&gt;(Car.&lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            enhancer.&lt;span style=&#34;color:#50fa7b&#34;&gt;setUseCache&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            enhancer.&lt;span style=&#34;color:#50fa7b&#34;&gt;setCallback&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; MethodInterceptor() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; Object &lt;span style=&#34;color:#50fa7b&#34;&gt;intercept&lt;/span&gt;(Object o, Method method, Object&lt;span style=&#34;color:#ff79c6&#34;&gt;[]&lt;/span&gt; objects, MethodProxy methodProxy) &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;throws&lt;/span&gt; Throwable {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt;(method.&lt;span style=&#34;color:#50fa7b&#34;&gt;getName&lt;/span&gt;().&lt;span style=&#34;color:#50fa7b&#34;&gt;equals&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;run&amp;#34;&lt;/span&gt;)){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        System.&lt;span style=&#34;color:#50fa7b&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#50fa7b&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;汽车启动前检查&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; methodProxy.&lt;span style=&#34;color:#50fa7b&#34;&gt;invokeSuper&lt;/span&gt;(o, objects);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    }&lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; methodProxy.&lt;span style=&#34;color:#50fa7b&#34;&gt;invokeSuper&lt;/span&gt;(o, objects);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Car car &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; (Car)enhancer.&lt;span style=&#34;color:#50fa7b&#34;&gt;create&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            car.&lt;span style=&#34;color:#50fa7b&#34;&gt;run&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            System.&lt;span style=&#34;color:#50fa7b&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#50fa7b&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;目前创建了&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;counter) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;个Car的子类&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Car&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;run&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            System.&lt;span style=&#34;color:#50fa7b&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#50fa7b&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;汽车启动，开始行使……&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;SafeCar&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;extends&lt;/span&gt; Car {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        @Override
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;run&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            System.&lt;span style=&#34;color:#50fa7b&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#50fa7b&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;汽车启动，开始行使……&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;super&lt;/span&gt;.&lt;span style=&#34;color:#50fa7b&#34;&gt;run&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;代码中使用无线循环创建Car的子类，jvm进程分配10m应该很快就会发生OOM，jvm参数：&lt;/p&gt;</description>
    </item>
    <item>
      <title>jvm-垃圾回收器和内存分配</title>
      <link>http://localhost:1313/posts/%E5%9F%BA%E7%A1%80/jvm/4.%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E5%92%8C%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E5%9F%BA%E7%A1%80/jvm/4.%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E5%92%8C%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</guid>
      <description>&lt;p&gt;本地方法栈、虚拟机栈和程序计数器会随着线程结束被回收，因为栈针需要多大的内存是确定的，而方法区和堆就有非常多的不确定性，比如一个接口的多个实现类需要的内存是不一样的，同一个方法进入不同分支需要的内存也不一样，所以这两个区域的内存分配和回收时动态的，也是垃圾回收负责的地方。&lt;/p&gt;
&lt;h5 id=&#34;对象存活判断&#34;&gt;对象存活判断&lt;/h5&gt;
&lt;p&gt;很多人说Java虚拟机里使用引用计数算法判断对象是否存活，比如对象中有一个引用计数器，被引用的时候就+1，引用失效的时候就-1，引用计数算法虽然需要花费额外的内存，但是他简单且高效，Python好像用的是这个，不过主流的Java虚拟机没有使用这个算法而是使用可达性分析来确定对象是否存活，因为引用计数看起来很简单，却需要考虑很多情况，必须要做大量的额外处理，比如两个对象的循环引用，其实两个对象都是死去的对象，但是他们的引用计数都不是0，所以不会被回收，一直占着内存。&lt;/p&gt;
&lt;p&gt;可达性分析就是先选出一堆GC Root，从这些节点开始根据引用关系向下搜索，搜索过程中走过的路径叫&lt;strong&gt;引用链&lt;/strong&gt;，那么如果一个对象和GC Root之间没有引用链，这个对象就是死去的对象，可以被回收。下面是可以当做GC Root的变量：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;虚拟机栈针中本地变量表的引用对象，可以理解成当前运行方法中的入参、局部变量和临时变量&lt;/li&gt;
&lt;li&gt;方法区中静态属性引用的对象&lt;/li&gt;
&lt;li&gt;方法区中常量引用的对象&lt;/li&gt;
&lt;li&gt;本地方法栈中JNI(就是Native中的方法)引用的对象&lt;/li&gt;
&lt;li&gt;虚拟机内部引用，比如基本数据类型对应的Class对象、一些常驻异常对象(NullPointException)等&lt;/li&gt;
&lt;li&gt;被同步锁持有的对象&lt;/li&gt;
&lt;li&gt;JMXBean、JVMTI、本地代码缓存等&lt;/li&gt;
&lt;li&gt;根据垃圾收集器和当前回收区域的不同还有其他对象临时加入GC Roots&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;标记为不可达对象后并不会马上进行回收，如果不可达的对象没有重写finalize方法或者这个对象的finalize方法已经被执行过了，就等着被回收，相反就把他放进一个F-Queue队列中，然后会有一个低优先级的Finalizer线程去遍历F-Queue中的对象并执行里面的finalize方法，想要不被回收可以在finalize方法中引用GC Root对象，注意&lt;strong&gt;每个对象的finalize方法在生命周期中只会被调用1次&lt;/strong&gt;。官方已经不推荐重写finalize方法了，因为它运行代价高，而且不能保证对象的调用顺序。&lt;/p&gt;
&lt;h3 id=&#34;经典回收器&#34;&gt;经典回收器：&lt;/h3&gt;
&lt;p&gt;经典说的是JDK7 update4以前出现的回收器，而在这之后的回收器有着高性能低延迟的革命性改进。分代回收器都是遵循分带理论的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;绝大多数的对象都是朝生夕灭的&lt;/li&gt;
&lt;li&gt;熬过越多次数的垃圾收集的对象就越难以消亡&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为这个理论出现了年轻代、老年代的划分，以及发展出了标记-复制算法、标记-清除算法、标记-整理算法。这种分代回收是有问题的，比如说对象之间会存在跨代引用的关系，这就让我们在回收年轻代的时候不得不去遍历老年代的对象，看看是否存在和老年代中的GCRoot有引用链关系的对象，为了解决扫描对象太多的问题在年轻代中维护了一个记忆集的东西，记录老年代中那些内存存在跨代引用，这样是减少了扫描，但是增加了运行时的开销。&lt;/p&gt;
&lt;h5 id=&#34;1serial&#34;&gt;1.Serial&lt;/h5&gt;
&lt;p&gt;serial的单线程不仅是使用1个处理器或者1个线程执行垃圾回收工作，最重要的是强调他在回收的时候需要Stop The Word，他的优点就是简单且高效，大部分的系统已经不用这个收集器了，但是目前他还是HotSpot的默认回收器，他在小内存比如桌面应用上回收效率极高，因为没有线程切换的花销。&lt;/p&gt;
&lt;h5 id=&#34;2parnew&#34;&gt;2.ParNew&lt;/h5&gt;
&lt;p&gt;ParNew是Serial的多线程版本，他俩的区别也只有线程数，像控制参数(-XX:SurvivorRatio、-XX:PretenureSizeThreshold、-XX:HandlePromotionFailure等)、回收策略、算法、对象分配规则都完全一样。单核服务器下他是没有Serial好用的，可以使用-XX:ParallelGCThreads调整垃圾收集的线程数，默认是处理器核心数。&lt;strong&gt;目前只有ParNew和Serial能和CMS配合使用&lt;/strong&gt;，因为其他收集器没有分代框架。&lt;strong&gt;在JDK9之后去掉了-XX:+UseParNewGC&lt;/strong&gt;参数，可以理解成ParNew合并到了CMS中。&lt;/p&gt;
&lt;h5 id=&#34;3parallel-scavenge吞吐量优先收集器&#34;&gt;3.Parallel Scavenge（吞吐量优先收集器）&lt;/h5&gt;
&lt;p&gt;他也是使用标记-复制算法，也是年轻代的垃圾收集器，和ParNew不同的是他可以控制运行业务代码的吞吐量，吞吐量的公式：&lt;/p&gt;
&lt;p&gt;$吞吐量=\frac{运行业务代码时间}{运行业务代码时间 + 运行垃圾收集时间}$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;-XX:MaxGCPauseMillis&lt;/strong&gt;参数要求是大于0的毫秒数，收集器会尽量保证收集的时间小于这个设定值，这个值直接影响回收频率。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;-XX:GCTimeRatio&lt;/strong&gt;参数要求正整数，表示期望虚拟机在GC上消耗的时间不超过程序运行时间的1/(1+n)，默认是99，意思就是垃圾收集器运行的时间不超过总运行时间的1%，也就是程序执行时间是垃圾回收执行之间的99倍以上。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;-XX:+UseAdaptiveSizePolicy&lt;/strong&gt;，他是个开关，如果打开就不需要手动设置-Xmn、E区和S区的比例、晋升老年代对象大小等等，虚拟机会根据当前运行情况的性能监控信息动态调整。&lt;/p&gt;
&lt;h5 id=&#34;4serial-old&#34;&gt;4.Serial Old&lt;/h5&gt;
&lt;p&gt;使用标记-整理算法，JDK5之前和Parallel Scavenge配合使用，目前应该是CMS失败的降级方案。&lt;/p&gt;
&lt;h5 id=&#34;5parallel-old&#34;&gt;5.Parallel Old&lt;/h5&gt;
&lt;p&gt;他是Parallel Scavenge的老年代版本，因为在JDK6之前Parallel Scavenge只能搭配Serial Old，这个非常慢，所以JDK6出了Parallel Old，他也使用的标记-整理算法。&lt;/p&gt;
&lt;h5 id=&#34;6cms&#34;&gt;6.CMS&lt;/h5&gt;
&lt;p&gt;CMS是获取最短回收停顿时间的回收器，他默认基于标记-整理算法，如果指定了CMS收集器(-XX:+UseConcMarkSweepGC)新生代收集器会默认选择ParNew。整个过程分成4步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始标记：标记被gc root直接关联的对象，这步会有stw，但是很快；&lt;/li&gt;
&lt;li&gt;并发标记：和系统并行，从上一步标记的对象中开始遍历进行标记所有垃圾对象，因为系统也在运行，所以可能有新对象进来，或者标记过的对象变化了，CMS都会记录，这步是最慢的，而且会占用CPU，使用线程数计算公式：(核数 + 3)/4；&lt;/li&gt;
&lt;li&gt;重新标记：把第二阶段变化的对象通过可达性分析标记成垃圾对象，会有stw，但是也很快；&lt;/li&gt;
&lt;li&gt;并发清除：和系统并行，清除垃圾对象；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CMS的缺点非常多，由于并发时使用的线程数是(核数 + 3)/4，所以核数越少，占用的资源就越多，比如4核就要占用25%的资源；而且他没有办法处理浮动垃圾，浮动垃圾就是在回收时产生的垃圾，虽然在并发清除前还要在标记一次，但是并发清除时产生的垃圾没有办法回收，所以使用CMS的堆不能等到内存满了在回收，可以通过**-XX:CMSInitiatingOccupancyFraction=92**参数调整使用内存达到某个百分比时进行GC，这个参数如果设置的越大就越容易导致并发失败。如果在垃圾回收时内存满了会导致并发失败，系统会自动切换成Serial Old回收器，这个时候就要stw了；&lt;/p&gt;
&lt;p&gt;最后一个缺点就是他的算法，默认是标记-整理，因为有个参数**-XX:CMSFullGCsBeforeCompaction=5(JDK9之后废弃)&lt;strong&gt;来控制回收几次后进行整理，默认是0，如果设置的参数大于0那就是标记-清除算法了，标记-清除会有大量内存碎片，标记-整理又会增加停顿时间，还有个参数是&lt;/strong&gt;-XX:+UseCMSCompactAtFullCollection(JDK9之后废弃)**，这个参数的意思是在FullGC时开启内存碎片的整理，因为需要移动存活对象，所以不能并发，他也会增加停顿时间。&lt;/p&gt;
&lt;h5 id=&#34;7g1回收器&#34;&gt;7.G1回收器&lt;/h5&gt;
&lt;p&gt;G1最早在JDK6update14的时候开始进入实验阶段，JDK7update4的时候进行商用直到JDK8的update40G1完成了并发的类卸载的最后一块功能拼图，在JDK9之后被当做默认的垃圾回收器。&lt;/p&gt;
&lt;p&gt;G1虽然也是遵循分代理论，但是没有年轻代和老年代的界限，所有对象都放到一起，还多了一个大对象(Humongous)区域(只要超过了region的一半就算大对象)。region的大小通过**-XX:G1HeapRegionSize**参数决定，范围是1M~32M，且要是2的n次幂。&lt;/p&gt;
&lt;p&gt;他只有两个回收情况，年轻代RegionGC和mixedGC，G1的垃圾回收算法都是使用复制清除算法，同样在年轻代中还是有两个survivor区的概念，只不过所有的区域都没有明显的划分。G1将堆内存划分为2048个region，默认初始会给年轻代5%个region，老年代0个，大数据也是0个，当年轻代的region数超过60%（默认）时进行一次regionGC，当老年代的region数超过45%（默认）时进行一次mixedGC，mixedGC包括老年代、年轻代和大数据区，G1的回收时的四个阶段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始标记：标记直接被gc root关联的对象，并且修改TAMS指针的值，这个也需要停顿，但是他是在MinorGC的时候同步完成的，不会有额外的停顿。&lt;/li&gt;
&lt;li&gt;并发标记：遍历上一步标记出来的对象，找到满足回收条件的对象，扫描完成后还要处理SATB记录下的在并发时有引用变化的对象。&lt;/li&gt;
&lt;li&gt;最终标记：std并且标记上一步遗留的SATB(原始快照)记录。&lt;/li&gt;
&lt;li&gt;筛选回收：更新region的统计数据，对每个region的回收价值进行排序(能够回收多少空间和回收的时间)，根据用户期望的停顿时间制定回收计划，然后把选中要回收的region中存活对象复制到空region中，最后清空region。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;G1是收集器技术的里程碑，从G1开始，收集器开始放弃每次回收整个堆，而是每次回收一小部分，只要保证回收的速度大于分配的速度就能让系统稳定运行。但是G1的记忆集、卡表这些指针会花费更多的内存。G1和CMS都是通过写屏障来维护卡表，但是CMS的卡表里只有和新生代有关联的对象，而G1维护的东西就多了，所以G1会更消耗资源。通常在小内存的时候CMS的性能要比G1好，6G或者8G以后使用G1要好。&lt;/p&gt;</description>
    </item>
    <item>
      <title>jvm-对象的创建和布局</title>
      <link>http://localhost:1313/posts/%E5%9F%BA%E7%A1%80/jvm/3.%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E5%B8%83%E5%B1%80/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E5%9F%BA%E7%A1%80/jvm/3.%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E5%B8%83%E5%B1%80/</guid>
      <description>&lt;p&gt;对象的创建包括new关键字、复制、反序列化等等。&lt;/p&gt;
&lt;h5 id=&#34;new关键字对象的创建&#34;&gt;new关键字对象的创建&lt;/h5&gt;
&lt;h6 id=&#34;第1步-类加载&#34;&gt;第1步 类加载&lt;/h6&gt;
&lt;p&gt;这里的new关键字不包括数组和Class对象，当虚拟机遇到一条字节码new指令时，首先会根据关键字的参数去常量池中找这个类的符号引用，然后在检查这个符号引用的类是否已经被加载、解析和初始化过，如果没有就先进行类加载。&lt;/p&gt;
&lt;h6 id=&#34;第2步-分配内存&#34;&gt;第2步 分配内存&lt;/h6&gt;
&lt;p&gt;类加载完之后需要多大的内存就可以确定了，这个时候就要为对象分配内存，如果堆中的内存是规整的，所有用过的内存放到一边，没用过的在另一边，那么分配内存就是把指针向空闲空间方向挪动一段与对象大小相等的距离，这种分配方式叫做指针碰撞(Bump The Pointer)；如果堆中的内存是不规整的，就必须要维护一个列表记录那些内存块是可用的，这种方式叫空闲列表(Free List)。&lt;/p&gt;
&lt;p&gt;至于堆是否规整由垃圾回收器决定，比如&lt;strong&gt;ParNew使用的就是指针碰撞，因为他在GC的时候有收集整理的能力，而CMS这种基于清除算法的收集器使用的就是空闲列表&lt;/strong&gt;。&lt;/p&gt;
&lt;h6 id=&#34;第3步-设置对象&#34;&gt;第3步 设置对象&lt;/h6&gt;
&lt;p&gt;分配完内存之后把分配到的内存空间都设置成0，如果使用了TLAB的话会在分配TLAB时设置，设置成0是为了保证对象中的变量不需要赋初始值就能直接使用。然后还有一堆设置，比如对象属于哪个类、类的元数据信息、GC的分带年龄等。&lt;/p&gt;
&lt;h6 id=&#34;第4步-调用构造方法&#34;&gt;第4步 调用构造方法&lt;/h6&gt;
&lt;p&gt;这个时候一个对象就已经生成了，但是对于java程序来说，对象的创建才刚开始，还需要在调用对象的构造方法，也就是class文件中的init()方法，是否调用构造方法由字节码中的new指令后面是否有invokespecial指令决定，编译器在编译时遇到new关键字会自动生成这个指令，如果通过其他方式产生的对象不一定会有这个指令，调用完构造方法之后对象才算被完整的构造出来。&lt;/p&gt;
&lt;h5 id=&#34;对象的内存布局&#34;&gt;对象的内存布局&lt;/h5&gt;
&lt;p&gt;在HotSpot虚拟机里，对象的内存布局可以分成3部分：对象头、实例数据和对齐填充。&lt;/p&gt;
&lt;h6 id=&#34;对象头&#34;&gt;对象头&lt;/h6&gt;
&lt;p&gt;对象头分成两类：一类是存储运行时的数据，另一类是指向类型元数据的指针，运行时的元数据在32位和64位的虚拟机中分别占32和64比特，官方称他为Mark Word：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;存储内容&lt;/th&gt;
          &lt;th&gt;标志位&lt;/th&gt;
          &lt;th&gt;状态&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;对象hash码、对象分代年龄&lt;/td&gt;
          &lt;td&gt;01&lt;/td&gt;
          &lt;td&gt;未锁定&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;指向锁记录的指针&lt;/td&gt;
          &lt;td&gt;00&lt;/td&gt;
          &lt;td&gt;轻量级锁定&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;指向重量级锁的指针&lt;/td&gt;
          &lt;td&gt;10&lt;/td&gt;
          &lt;td&gt;重量级锁定&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;空&lt;/td&gt;
          &lt;td&gt;11&lt;/td&gt;
          &lt;td&gt;GC标记&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;偏向线程ID、偏向时间戳、对象分代年龄&lt;/td&gt;
          &lt;td&gt;01&lt;/td&gt;
          &lt;td&gt;可偏向&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;对象运行时的数据有的已经超过了32或者64bit能记录的最大限度，所以Mark Word被设计成了一个动态定义的数据结构，比如32位的HotSpot虚拟机中，如果对象没有被同步锁锁定，32个bit中25个bit存储hash码，4个bit存储分代年龄，2bit存储锁标志位，还有1bit固定是0。&lt;/p&gt;
&lt;p&gt;指向类型元数据的指针是为了判断对象是哪个类的实例，单并不是只能通过这个指针查找元数据信息，通过元数据信息还可以计算出对象的大小，因为数组的长度是不确定的，所以数组的对象头中需要记录数组的长度。&lt;/p&gt;
&lt;h6 id=&#34;实例数据部分&#34;&gt;实例数据部分&lt;/h6&gt;
&lt;p&gt;这部分存储的是代码中定义的各种类型的字段内容，包括从父类继承下来的，longs/doubles-&amp;gt;ints-&amp;gt;shorts/chars-&amp;gt;bytes/booleans-&amp;gt;oops(Ordinary Object Pointers)，同时父类的long会出现在子类的long之前。可以通过**-XX:FieldsAllocationStyle&lt;strong&gt;调整顺序策略，如果配置了&lt;/strong&gt;-XX:CompactFields=true**那么子类比较窄的变量会插到父类变量的空隙中来节约内存。&lt;/p&gt;
&lt;h6 id=&#34;对齐填充&#34;&gt;对齐填充&lt;/h6&gt;
&lt;p&gt;由于HotSpot要求对象的大小必须是8的整数倍，对象头已经是8的整数倍了，如果实例数据不是8的整数倍就需要通过对齐填充来补全。&lt;/p&gt;
&lt;h5 id=&#34;对象的定位&#34;&gt;对象的定位&lt;/h5&gt;
&lt;p&gt;对象主要通过栈上的reference数据来操作堆上的具体对象，但是reference指向有两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;句柄池：在堆内存中需要一块单独的区域来当句柄池，句柄中包含的对象的类型数据和实例数据，reference如果存储的是对象的句柄地址，在定位对象的时候会先找到句柄，然后在去查找对象，这个样有个好处就是对象地址改变的时候只需要修改句柄中的实例数据指针，不需要修改所有对象的引用指针，坏处就是不好的地方就是多一次指针定位。&lt;/li&gt;
&lt;li&gt;直接指针：reference中存储的就是对象地址，减少一次指针定位的开销，HotSpot主要是用的就是这种方式。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>JVM参数</title>
      <link>http://localhost:1313/posts/%E5%9F%BA%E7%A1%80/jvm/jvm%E5%8F%82%E6%95%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E5%9F%BA%E7%A1%80/jvm/jvm%E5%8F%82%E6%95%B0/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;69
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;70
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;71
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;72
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;73
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;74
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;75
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;76
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 初始堆内存&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-Xms512M
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 最大堆内存&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-Xmx512M
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 初始年轻代内存  1.8:-XX:NewSize&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-Xmn256M
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 1.8最大年轻代内存&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-XX:MaxNewSize&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;256M
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 虚拟机栈内存&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-Xss1M
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 初始元空间内存&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-XX:MetaspaceSize&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;128M
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 最大元空间内存&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-XX:MaxMetaspaceSize&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;128M
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 设置Eden区和两个survivor区比例，当前意思是7:1:1默认8:1:1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-XX:SurvivorRatio&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 配置年轻代对象躲过多少次minorGC后进入老年代，默认15次&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-XX:MaxTenuringThreshold&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 超过多少字节的对象直接进入老年代&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-XX:PretenureSizeThreshold&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1048576&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 当年轻代所有对象大于老年代剩余空间时，判断之前每次进入老年代的对象大小如果都比老年代剩余内存小，就不进行老年代垃圾回收（fullGC），否则进行老年代垃圾回收   JDk1.6之后默认开启&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-XX:-HandlePromotionFailure&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 设置jvm对新生代GC的垃圾回收器为ParNew&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-XX:+UseParNewGC
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 设置jvm对老年代GC的垃圾回收期为CMS&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-XX:+UseConcMarkSweepGC
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# cms初始标记阶段开启多线程执行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-XX:+CMSParallelInitialMarkEnabled
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 在cms重新标记阶段之前执行一个yongGC&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-XX:+CMSScavengeBeforeRemark
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 调节ParNew回收时使用的线程数（默认与CPU核数相同）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-XX:ParallelGCThreads&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 当老年代剩余可用空间不足92%时，进行fullGC&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-XX:CMSInitiatingOccupancyFraction&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;92&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# fullGC之后停止系统所有线程，进行老年代空间整理&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-XX:+UseCMSCompactAtFullCollection
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 每多少次fullGC之后进行一次空间整理&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-XX:CMSFullGCsBeforeCompaction&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;##################################G1相关##################################&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 使用G1回收器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-XX:+UseG1GC
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 设置为G1回收器时，新生代默认初始堆内存占比&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-XX:G1NewSizePercent
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-XX:G1HeapRegionSize
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 新生代占比最多为&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-XX:G1MaxNewSizePercent
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# G1回收时最多消耗时间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-XX:MaxGCPauseMills
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 默认是45%，当老年代的region数超过总region数的45%，进行年轻代和老年代和大对象的混合垃圾回收&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-XX:InitiatingHeapOccupancyPercent
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 配置混合回收次数，默认8次&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-XX:G1MixedGCCountTarget&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-XX:G1HeapWastePercent
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# region中的存活对象低于多少时才可以回收，默认是85%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-XX:G1MixedGCLiveThresholdPercent
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;########################################################################&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 打印详细的gc日志&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-XX:+PrintGCDetils
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 打印出来每次GC发生的时间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-XX:+PrintGCTimeStamps
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 设置将gc日志写入一个磁盘文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-Xloggc:gc.log
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 禁止显示执行GC System.gc()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-XX:+DisableExplicitGC
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 在OOM时生成快照文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-XX:+HeapDumpOnOutOfMemoryError
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 生成的OOM快照位置&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-XX:HeapDumpPath&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;/usr/local/app/oom
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 关闭锁粗化&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-XX:-EliminateLocks
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 堆外内存大小&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-XX:MaxDirectMemorySize
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;查看服务启动参数：jps -lv&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
