<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>单测 on 王小红的笔记</title>
    <link>http://localhost:1313/tags/%E5%8D%95%E6%B5%8B/</link>
    <description>Recent content in 单测 on 王小红的笔记</description>
    <generator>Hugo -- 0.150.0</generator>
    <language>zh-CN</language>
    <atom:link href="http://localhost:1313/tags/%E5%8D%95%E6%B5%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>服务治理-4.单测</title>
      <link>http://localhost:1313/posts/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86/5.%E5%8D%95%E6%B5%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86/5.%E5%8D%95%E6%B5%8B/</guid>
      <description>&lt;h5 id=&#34;合格的单元测试&#34;&gt;合格的单元测试&lt;/h5&gt;
&lt;p&gt;一个优秀的单元测试应该满足5个条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可验证：当单侧代码运行完就可以验证业务代码是否有问题，而不是通过肉眼去看log，即使用assert来判断结果。&lt;/li&gt;
&lt;li&gt;可重复：当单测写好后是可以不分环境不分时间的运行的，比如依赖MySQL，想MySQL中插入数据区测试，如果数据被删或者在测试环境都没有这个数据了，这个单测没法进行，就是说要避免对基础环境(redis、es、MySQL、mq等)和外部接口(rpc接口)的依赖。执行完单测后应该恢复现场， 把之前准备的数据和单测过程中产生的数据全部释放或者删掉。&lt;/li&gt;
&lt;li&gt;独立性：单测方法之间独立，单测的方法不能依赖其他单测方法的结果。并且每个单测方法只测试一种情况。&lt;/li&gt;
&lt;li&gt;彻底的：核心逻辑的所有分支都要覆盖，整体覆盖率不低于70%。&lt;/li&gt;
&lt;li&gt;专业的：测试代码也要有可维护性，因为业务变更频繁，所以单测也会频繁修改和扩展，所以要保证单测的类的职责单一，方法命名清晰，降低方法的复杂度，保证可扩展性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;powermock框架使用&#34;&gt;PowerMock框架使用&lt;/h5&gt;
&lt;p&gt;常见的框架一般就是Mockito 2.x：官网(&lt;a href=&#34;https://mockito.org&#34;&gt;https://mockito.org&lt;/a&gt;)及(&lt;a href=&#34;https://github.com/mockito/mockito&#34;&gt;https://github.com/mockito/mockito&lt;/a&gt; )和PowerMock 2.x：官网(&lt;a href=&#34;https://github.com/powermock/powermock&#34;&gt;https://github.com/powermock/powermock&lt;/a&gt;)。PowerMock 2.x扩展了了EasyMock和Mockito。Mockito基于Cglib模拟public访问权限类型的方法，PowerMock基于javassist和objenesis来修改类的字节码 + ⾃定义类加载器模拟public、private、static、final等访问权限修饰的⽅法。&lt;/p&gt;
&lt;p&gt;使用PowerMock之前需要初始化：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@Before
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;init&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    MockitoAnnotations.&lt;span style=&#34;color:#50fa7b&#34;&gt;initMocks&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;然后使用@MockBean标注需要被mock的bean，这个注解会将⼀个spring bean的所有⽅法变成⼀个空⽅法，然后配合**PowerMockito.when().thenReturn()&lt;strong&gt;或者&lt;/strong&gt;PowerMockito.doNothing().when()**来mock数据。&lt;/p&gt;
&lt;p&gt;有一个和@MockBean类似的注解是@SpyBean，他的意思是说spring bean保持原样，只有调用了比如PowerMockito.doReturn().when()这种代码后这个方法才会被mock。当我们不想所有方法都mock的时候可以使用这个注解。&lt;/p&gt;
&lt;p&gt;@Rule注解是配合JUnit4使用的，他用来断言抛出的异常是否是期望的异常，JUnit5使用过**Assert.assertThrows()**来验证异常。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这么写单测需要花费大量的时间，特别是造数据和清理数据。很有可能单测的代码要比业务逻辑的代码要多。所以一些外部系统，比如redis、es可以使用测试环境，这样会大幅度降低造数据和清理数据消耗的时间。&lt;/p&gt;&lt;/blockquote&gt;</description>
    </item>
  </channel>
</rss>
