<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>分布式id on 王小红的笔记</title>
    <link>http://localhost:1313/tags/%E5%88%86%E5%B8%83%E5%BC%8Fid/</link>
    <description>Recent content in 分布式id on 王小红的笔记</description>
    <generator>Hugo -- 0.150.0</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 19 Jan 2021 06:27:35 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/%E5%88%86%E5%B8%83%E5%BC%8Fid/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1.分布式id-常见方案</title>
      <link>http://localhost:1313/posts/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E5%88%86%E5%B8%83%E5%BC%8Fid/1.%E5%B8%B8%E8%A7%81%E6%96%B9%E6%A1%88/</link>
      <pubDate>Tue, 19 Jan 2021 06:27:35 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E5%88%86%E5%B8%83%E5%BC%8Fid/1.%E5%B8%B8%E8%A7%81%E6%96%B9%E6%A1%88/</guid>
      <description>&lt;h5 id=&#34;分布式id生成器发号器使用场景&#34;&gt;分布式id生成器(发号器)使用场景&lt;/h5&gt;
&lt;p&gt;主要是用来做分库分表中数据的id。&lt;/p&gt;
&lt;h5 id=&#34;常见方案&#34;&gt;常见方案&lt;/h5&gt;
&lt;h6 id=&#34;1数据库主键自增&#34;&gt;1.数据库主键自增&lt;/h6&gt;
&lt;p&gt;专门搞一个库和一个表，这个表只生成id，比如在插入真正数据之前，先往这个id生成表里插入，返回值就是主键。这种方案非常简单但是不能抗高并发，因为他是单标抗高并发写，肯定不现实。如果是低并发，低负载只是数据量大还勉强，关键是生产还需要保证这个表时高可用的，否则一个库挂了整个系统都死了，而且生成id的表还需要定期清理，其实也不简单。&lt;/p&gt;
&lt;h6 id=&#34;2uuid&#34;&gt;2.UUID&lt;/h6&gt;
&lt;p&gt;他应该是最简单的，直接本地生成，没有并发和可用问题，但是他生成的字符串，而且还很长，很长就会浪费空间，关键是他是字符串，而且不是自增，不是自增的主键会导致MySQL频繁的页分裂。如果有网卡的话UUID是基于Mac地址获得，容易暴露Mac地址。&lt;/p&gt;
&lt;h6 id=&#34;3snowflake&#34;&gt;3.snowflake&lt;/h6&gt;
&lt;p&gt;雪花算范最终得到的是一个long类型数字，但是在计算的时候使用的是二进制，结构如下：&lt;/p&gt;
&lt;p&gt;| 0/1 | 41位二进制，当前时间 | n位二进制，n位机房id | 5位二进制，机器id | 12位二进制 |&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;第一位没有意义，是二进制标记位，0代表正数，1代表负数；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当前时间：使用当前时间毫秒时间戳转换为二进制，最高大约是69年；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;10位的机房id和机器id：这两个可以随意传，比如服务器A、B、C，每台服务器部署了两个服务D、E，那么服务器A的机房id可以为1，服务器B的机房id为2，服务器C的机房id为3；服务D的机器id为1，服务E的id为2，或者这10位都是机器id，也就是发号器最多可以部署1024台服务；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;12位二进制：当同一毫秒多个请求访问雪花算法工具类时，序号加1，意思是每台机器每毫秒最多生成4096个id，非常非常多了；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;他有很多问题，比如始终回拨：在多服务器上生成全局id，如果想保证id递增性，需要以一个机器作为基准，其他机器定时与这台机器时间校准，如果出现一台机器的时间快了，进行时间回调的之后，在生成的id可能就与之前的重复。
而且他需要独立部署，独立维护。&lt;/p&gt;
&lt;h6 id=&#34;4redis自增&#34;&gt;4.redis自增&lt;/h6&gt;
&lt;p&gt;比如5台redis机器，每台机器分别从1、2、3、4、5开始自增，自增的步长是5，这样也能抗住并发，但是需要每次生成id的时候定位机器，redis的数量也要写死，如果涉及到扩容是非常麻烦的，要改代码，还要清洗之前的id。如果想用在集群上还是单机合适一点，可是如果是单机需要主从保证高可用，如果发生主备切换就可能导致id重复，因为redis的主从同步是异步的。&lt;/p&gt;
&lt;h6 id=&#34;5基于时间戳业务id的组合&#34;&gt;5.基于时间戳+业务id的组合&lt;/h6&gt;
&lt;p&gt;比如订单id基于时间戳+用户id这样可以保证唯一，除非他是用程序刷单或者系统bug。再比如打车软件是时间戳+地点id+手机号后4位之类的，这种冲突的概率就非常低了，但是理论上有可能会存在重复问题。他也只适合跟时间戳相关的业务。&lt;/p&gt;
&lt;p&gt;第一优先级考虑这个。&lt;/p&gt;
&lt;h6 id=&#34;6flicker雅虎下的图片分享平台&#34;&gt;6.flicker(雅虎下的图片分享平台)&lt;/h6&gt;
&lt;p&gt;首先创建一张生成id的表：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-mysql&#34; data-lang=&#34;mysql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;TABLE&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;id_generator&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt; (  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;id&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;bigint&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;NOT&lt;/span&gt; NULL &lt;span style=&#34;color:#ff79c6&#34;&gt;auto_increment&lt;/span&gt;,  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;stub&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;char&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;NOT&lt;/span&gt; NULL &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;PRIMARY&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;KEY&lt;/span&gt;  (&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;id&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;),  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;UNIQUE&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;KEY&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;stub&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;stub&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;)  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;ENGINE&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;MyISAM;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;注意这里的引擎使用的MyISAM，他的表现比InnoDB好，生成id的语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-mysql&#34; data-lang=&#34;mysql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;REPLACE&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;INTO&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id_generator&lt;/span&gt;(stub) &lt;span style=&#34;color:#ff79c6&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;);  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;LAST_INSERT_ID&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这样可以避免行数过大，一张表就一行数据。优化一下就是stub的值设置成每个服务的id，比如ip什么的，这样就会有多行，或者说stub设置成项目名，这样就支持多业务了，数据库只要双机主从高可用，在设置起始id和步长，类似redis自增的那种。但是他还是扛不住并发，但是生产可用，他和redis自增类似也会产生重复id问题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>2.分布式id-snowflake生产方案</title>
      <link>http://localhost:1313/posts/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E5%88%86%E5%B8%83%E5%BC%8Fid/2.snowflake%E7%94%9F%E4%BA%A7%E6%96%B9%E6%A1%88/</link>
      <pubDate>Tue, 19 Jan 2021 06:27:35 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E5%88%86%E5%B8%83%E5%BC%8Fid/2.snowflake%E7%94%9F%E4%BA%A7%E6%96%B9%E6%A1%88/</guid>
      <description>&lt;h5 id=&#34;机器和机房id处理&#34;&gt;机器和机房id处理&lt;/h5&gt;
&lt;p&gt;机器id的话可以通过zk的顺序节点来实现，每台机器启动都去zk目录下创建持久化顺序节点，拿到顺序号就是自己机器的id了，拿到id之后写到本地磁盘里，下次启动直接从本地拿。&lt;/p&gt;
&lt;h5 id=&#34;全局递增id&#34;&gt;全局递增id&lt;/h5&gt;
&lt;p&gt;因为snowflake的id是局部递增的，只能保证每台机器生成的id是自增的，如果有个业务想要拿到绝对递增的id，需要把请求打到同一台发号器上去。唯一ID生成服务要两台节点以上保证可用性，所以要知道发号器的服务地址，需要根据地址做负载均衡和重试。这些都可以使用nacos+dubbo解决。&lt;/p&gt;
&lt;h5 id=&#34;时钟回拨问题&#34;&gt;时钟回拨问题&lt;/h5&gt;
&lt;p&gt;只要有时钟同步问题就会有时钟回拨的问题，判断时钟回拨很简单。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把时钟同步关了，基本上不会关，可能会因为时间导致系统崩溃。&lt;/li&gt;
&lt;li&gt;记录每次生成id的时间戳，每次生成id的时候比较这个时间戳和系统的时间，如果系统的时间小就说明时钟回拨了，这个时候可以等，如果判断要等的时间很短，就夯住，时间很长就可以直接返回失败，但是返回失败这个是非常不好的。&lt;/li&gt;
&lt;li&gt;针对第二种方案的优化，如果时钟回拨后和之前差几秒，这个时候可以返回异常+持续时间，让发号器的客户端重试并且在持续时间内不请求这台服务器，如果差很多，已经几十秒了，发号器客户端直接把这台机器从服务列表里删除，然后发号器就直接报警在主动下线，等到时间到了再次上线。&lt;/li&gt;
&lt;li&gt;在优化减少发号器的重试，可以保存1s内每1毫秒生成的id的最大值，因为时钟回拨很少超过1s，当发现时钟回拨时，如果时间在1s内，就从拿到这个毫秒之前生成id的最大值开始递增。&lt;/li&gt;
&lt;li&gt;如果在重启时发生时钟回拨时没法检测的，就算检测到了也没办法解决，所以每次启动的时候都需要拿到一个新的机器id，再把之前创建的zk顺序节点删掉，没有持久化操作，如果zk上的节点超过了1024个直接切换目录。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://tva1.sinaimg.cn/large/e6c9d24ely1h0txkh25kjj21pc0n4di8.jpg&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>3.分布式id-leaf</title>
      <link>http://localhost:1313/posts/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E5%88%86%E5%B8%83%E5%BC%8Fid/3.leaf/</link>
      <pubDate>Tue, 19 Jan 2021 06:27:35 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E5%88%86%E5%B8%83%E5%BC%8Fid/3.leaf/</guid>
      <description>&lt;p&gt;leaf有两种实现方式，flicker和snowflake，[leaf文档][https://tech.meituan.com/2017/04/21/mt-leaf.html]，它实现的flicker和之前的方案一模一样，多了一个号段的buffer，当一个号段用完之后切换，实现一个号段buffer一只可用，没有号段用完的阻塞。&lt;/p&gt;
&lt;p&gt;leaf实现的snowflake要简单一些，启动的时候判断是否发生长时间的时钟回拨，然后在生成id的时候简单判断当前时间和上次生成id的时候，如果比上次生成id的时间小就等10ms，如果还是不行就返回错误了，并且他建议关闭NTP同步服务，他把一些细节比如重试、服务下线什么的交给自己实现了。&lt;/p&gt;
&lt;p&gt;源码非常简单。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
