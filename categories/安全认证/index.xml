<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>安全认证 on 王小红的笔记</title><link>https://wangxiaohong123.github.io/categories/%E5%AE%89%E5%85%A8%E8%AE%A4%E8%AF%81/</link><description>Recent content in 安全认证 on 王小红的笔记</description><generator>Hugo -- 0.150.0</generator><language>zh-CN</language><atom:link href="https://wangxiaohong123.github.io/categories/%E5%AE%89%E5%85%A8%E8%AE%A4%E8%AF%81/index.xml" rel="self" type="application/rss+xml"/><item><title>1.shiro入门</title><link>https://wangxiaohong123.github.io/posts/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E5%AE%89%E5%85%A8%E8%AE%A4%E8%AF%81/shiro/1.%E5%85%A5%E9%97%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wangxiaohong123.github.io/posts/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E5%AE%89%E5%85%A8%E8%AE%A4%E8%AF%81/shiro/1.%E5%85%A5%E9%97%A8/</guid><description>&lt;h5 id="功能"&gt;功能&lt;/h5&gt;
&lt;h6 id="1主要功能"&gt;1.主要功能&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;Authentication：身份认证/登录，验证用户是否是所声明的用户。&lt;/li&gt;
&lt;li&gt;Authorization：授权验证，验证某个用户是否拥有某个权限。&lt;/li&gt;
&lt;li&gt;Session Management：会话管理，用户信息也是保存在会话当中。&lt;/li&gt;
&lt;li&gt;Cryptography：加密，保护数据的安全性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id="2扩展功能"&gt;2.扩展功能&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;web support：很容易集成到web环境。&lt;/li&gt;
&lt;li&gt;caching：缓存，避免每次查询数据库。&lt;/li&gt;
&lt;li&gt;concurrency：多线程并发验证。&lt;/li&gt;
&lt;li&gt;testing：很方便的测试验证。&lt;/li&gt;
&lt;li&gt;run as：允许一个用户假装成另外一个用户身份。&lt;/li&gt;
&lt;li&gt;remember me：记住我那个选中框。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="使用"&gt;使用&lt;/h5&gt;
&lt;p&gt;使用流程：创建realm(安全数据源)-&amp;gt;构建框架核心类SecurityManager-&amp;gt;将realm绑定到SecurityManager-&amp;gt;获取token凭证(用户名|密码)-&amp;gt;调用Subject API完成登录校验。&lt;/p&gt;
&lt;p&gt;创建好一个springboot的项目，引入MySQL，编辑好配置文件，增加shiro的配置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;"&gt;&lt;tr&gt;&lt;td style="vertical-align:top;padding:0;margin:0;border:0;"&gt;
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;1
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;2
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;3
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;4
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;5
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%"&gt;
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-xml" data-lang="xml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;&amp;lt;!-- 我这里使用的是1.8.0 --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ff79c6"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff79c6"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.shiro&lt;span style="color:#ff79c6"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff79c6"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;shiro-spring-boot-web-starter&lt;span style="color:#ff79c6"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff79c6"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${shiro.version}&lt;span style="color:#ff79c6"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ff79c6"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h6 id="1登录"&gt;1.登录：&lt;/h6&gt;
&lt;p&gt;一）测试在代码里写死用户名和密码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;"&gt;&lt;tr&gt;&lt;td style="vertical-align:top;padding:0;margin:0;border:0;"&gt;
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 1
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 2
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 3
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 4
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 5
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 6
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 7
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 8
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 9
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;10
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;11
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;12
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;13
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;14
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;15
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;16
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;17
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;18
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%"&gt;
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;@Test
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;public&lt;/span&gt; &lt;span style="color:#8be9fd"&gt;void&lt;/span&gt; &lt;span style="color:#50fa7b"&gt;login&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; SimpleAccountRealm realm &lt;span style="color:#ff79c6"&gt;=&lt;/span&gt; &lt;span style="color:#ff79c6"&gt;new&lt;/span&gt; SimpleAccountRealm();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; realm.&lt;span style="color:#50fa7b"&gt;addAccount&lt;/span&gt;(&lt;span style="color:#f1fa8c"&gt;&amp;#34;xx&amp;#34;&lt;/span&gt;, &lt;span style="color:#f1fa8c"&gt;&amp;#34;123456&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; DefaultSecurityManager defaultSecurityManager &lt;span style="color:#ff79c6"&gt;=&lt;/span&gt; &lt;span style="color:#ff79c6"&gt;new&lt;/span&gt; DefaultSecurityManager();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; defaultSecurityManager.&lt;span style="color:#50fa7b"&gt;setRealm&lt;/span&gt;(realm);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#6272a4"&gt;// 全局设置安全管理器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; SecurityUtils.&lt;span style="color:#50fa7b"&gt;setSecurityManager&lt;/span&gt;(defaultSecurityManager);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; UsernamePasswordToken token &lt;span style="color:#ff79c6"&gt;=&lt;/span&gt; &lt;span style="color:#ff79c6"&gt;new&lt;/span&gt; UsernamePasswordToken(&lt;span style="color:#f1fa8c"&gt;&amp;#34;xx&amp;#34;&lt;/span&gt;, &lt;span style="color:#f1fa8c"&gt;&amp;#34;123456&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#6272a4"&gt;// 创建Subject&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Subject subject &lt;span style="color:#ff79c6"&gt;=&lt;/span&gt; SecurityUtils.&lt;span style="color:#50fa7b"&gt;getSubject&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#6272a4"&gt;// 登录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; subject.&lt;span style="color:#50fa7b"&gt;login&lt;/span&gt;(token);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Assert.&lt;span style="color:#50fa7b"&gt;isTrue&lt;/span&gt;(subject.&lt;span style="color:#50fa7b"&gt;isAuthenticated&lt;/span&gt;());
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#6272a4"&gt;// 登出&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; subject.&lt;span style="color:#50fa7b"&gt;logout&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Assert.&lt;span style="color:#50fa7b"&gt;isTrue&lt;/span&gt;(&lt;span style="color:#ff79c6"&gt;!&lt;/span&gt;subject.&lt;span style="color:#50fa7b"&gt;isAuthenticated&lt;/span&gt;());
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;二）测试通过文件获取用户&lt;/p&gt;</description></item><item><title>4.shiro-权限流程</title><link>https://wangxiaohong123.github.io/posts/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E5%AE%89%E5%85%A8%E8%AE%A4%E8%AF%81/shiro/4.%E6%9D%83%E9%99%90%E6%B5%81%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wangxiaohong123.github.io/posts/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E5%AE%89%E5%85%A8%E8%AE%A4%E8%AF%81/shiro/4.%E6%9D%83%E9%99%90%E6%B5%81%E7%A8%8B/</guid><description>&lt;p&gt;权限认证流程比账号认证简单一些：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;调用Subject的checkRole()或者isPermitted()方法&lt;/li&gt;
&lt;li&gt;调用SecurityManager的checkRole()或者isPermitted()方法&lt;/li&gt;
&lt;li&gt;调用Authorizer的checkRole()或者isPermitted()方法&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;流程图：
&lt;img loading="lazy" src="https://tva1.sinaimg.cn/large/e6c9d24ely1h0k63b24pjj21by0csgms.jpg"&gt;&lt;/p&gt;
&lt;p&gt;权限相关的组件：&lt;/p&gt;
&lt;p&gt;PermissionResolver：用于解析权限字符串到Permission实例，默认内部实现是WildcardPermissionResolver&lt;/p&gt;
&lt;p&gt;RolePermissionResolver：根据角色解析相应的权限集合，没有默认实现&lt;/p&gt;
&lt;h5 id="注解原理"&gt;注解原理&lt;/h5&gt;</description></item><item><title>5.shiro-session原理</title><link>https://wangxiaohong123.github.io/posts/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E5%AE%89%E5%85%A8%E8%AE%A4%E8%AF%81/shiro/5.session%E5%8E%9F%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wangxiaohong123.github.io/posts/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E5%AE%89%E5%85%A8%E8%AE%A4%E8%AF%81/shiro/5.session%E5%8E%9F%E7%90%86/</guid><description>&lt;p&gt;了解session原理需要先看Subject的源码，因为session由他管理，打开这个接口看到有个内部类叫Builder，它里面有两个变量：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;"&gt;&lt;tr&gt;&lt;td style="vertical-align:top;padding:0;margin:0;border:0;"&gt;
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;1
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%"&gt;
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;private&lt;/span&gt; &lt;span style="color:#8be9fd;font-style:italic"&gt;final&lt;/span&gt; SubjectContext subjectContext;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;private&lt;/span&gt; &lt;span style="color:#8be9fd;font-style:italic"&gt;final&lt;/span&gt; SecurityManager securityManager;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h5 id="subjectcontext"&gt;SubjectContext&lt;/h5&gt;
&lt;p&gt;负责管理Subject上下文接口，他继承了Map类，里面是一些get、set方法，他有1个实现类(DefaultSubjectContext)和一个子接口(WebSubjectContext)，WebSubjectContext就是把request、response等变量存起来，实现类和子接口有一个共同的实现类(DefaultWebSubjectContext)。&lt;/p&gt;
&lt;p&gt;Builder在实例化的时候会创建一个DefaultSubjectContext然后把SecurityManager放进去，Builder中还有一个buildSubject()方法，调用SecurityManager的createSubject()根据创建的SubjectContext创建一个Subject。&lt;/p&gt;
&lt;p&gt;Subject也有一个实现类(DelegatingSubject)和一个子接口(WebSubject)，他俩有一个共同的实现类(WebDelegatingSubject)，当项目启动时，通过MEATA-INF扫描到shiro的一堆bean，spring.factories的配置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;"&gt;&lt;tr&gt;&lt;td style="vertical-align:top;padding:0;margin:0;border:0;"&gt;
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 1
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 2
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 3
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 4
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 5
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 6
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 7
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 8
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 9
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%"&gt;
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-properties" data-lang="properties"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#50fa7b"&gt;org.springframework.boot.autoconfigure.EnableAutoConfiguration&lt;/span&gt; &lt;span style="color:#ff79c6"&gt;=&lt;/span&gt; &lt;span style="color:#f1fa8c"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f1fa8c"&gt; org.apache.shiro.spring.config.web.autoconfigure.ShiroWebAutoConfiguration,\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f1fa8c"&gt; org.apache.shiro.spring.config.web.autoconfigure.ShiroWebFilterConfiguration,\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f1fa8c"&gt; org.apache.shiro.spring.config.web.autoconfigure.ShiroWebMvcAutoConfiguration,\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f1fa8c"&gt; org.apache.shiro.spring.boot.autoconfigure.ShiroBeanAutoConfiguration,\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f1fa8c"&gt; org.apache.shiro.spring.boot.autoconfigure.ShiroAutoConfiguration,\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f1fa8c"&gt; org.apache.shiro.spring.boot.autoconfigure.ShiroAnnotationProcessorAutoConfiguration&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#50fa7b"&gt;org.springframework.boot.diagnostics.FailureAnalyzer&lt;/span&gt; &lt;span style="color:#ff79c6"&gt;=&lt;/span&gt; &lt;span style="color:#f1fa8c"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f1fa8c"&gt; org.apache.shiro.spring.boot.autoconfigure.ShiroNoRealmConfiguredFailureAnalyzer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;其中有个bean就叫ShiroWebFilterConfiguration，在这个filterConfiguration中创建了ShiroFilterFactoryBean，而这个bean继承了BeanPostProcessor，这个bean的getObject()方法里创建了AbstractShiroFilter，这个filter创建并且调用了Subject：&lt;/p&gt;</description></item><item><title>权限系统介绍</title><link>https://wangxiaohong123.github.io/posts/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E5%AE%89%E5%85%A8%E8%AE%A4%E8%AF%81/%E6%9D%83%E9%99%90%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wangxiaohong123.github.io/posts/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E5%AE%89%E5%85%A8%E8%AE%A4%E8%AF%81/%E6%9D%83%E9%99%90%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/</guid><description>&lt;h3 id="acl模型"&gt;ACL模型&lt;/h3&gt;
&lt;p&gt;Access Control List访问控制列表，它是一种最早也是最基本的控制方式，每一项资源都配有一个列表，列表里会记录哪些用户有哪些权限，当用户试图操作这个权限的时候，回先去检查这个列表中是否当前用户的这个权限。&lt;/p&gt;
&lt;p&gt;主要包含3个要素，用户、资源、操作。Linux的文件权限就是ACL方式，路由器的设备限速什么的也是用的这种方式。&lt;/p&gt;
&lt;p&gt;他有个缺点就是当资源和用户非常多的时候性能不好。&lt;/p&gt;
&lt;h3 id="dac模型"&gt;DAC模型&lt;/h3&gt;
&lt;p&gt;Discretionary Access Control自主访问控制，他是ACL的变种，本质上也是维护了一些资源，但是他规定资源可以被那些用户操作的同时，用户也可以将资源的操作权限授予其他用户，比如windoes的文件权限。他更灵活，但是由于用户的权限太大，可能无意间会泄露信息。&lt;/p&gt;
&lt;h3 id="mac模型"&gt;MAC模型&lt;/h3&gt;
&lt;p&gt;Mandatory Access Control强制访问控制，他是ACL的另一种实现，他更强调安全性，MAC会在系统中对资源和用户划分类别和等级，比如高考试卷的类别就是考试类，级别是绝密级。&lt;/p&gt;
&lt;p&gt;MAC一般有两个列表，一个列表标记操作资源的最低级别、类别和主体(类似角色)，另一张表配置用户属于哪个类别，哪个级别，哪个主体。&lt;/p&gt;
&lt;p&gt;他非常适合一些机密机构，虽然他和ACL有相同的缺点。&lt;/p&gt;
&lt;h3 id="rbac模型"&gt;RBAC模型&lt;/h3&gt;
&lt;p&gt;Role-Based Access Control基于角色的访问控制，大部分的框架比如shiro、spring security都是基于RBAC设计的，他主要有三个著名的安全原则：最小权限原则、责任分离原则和数据抽象原则。&lt;/p&gt;
&lt;p&gt;最小权限原则：将角色配置成完成任务所需的最小权限集合；&lt;/p&gt;
&lt;p&gt;责任分离原则：可以通过调用互相独立互斥的角色共同完成敏感任务；&lt;/p&gt;
&lt;p&gt;数据抽象原则：可以通过权限的抽象来体现，例如财务操作有借款、存款而不是读、写、执行等等。&lt;/p&gt;
&lt;p&gt;RBAC可以抽象的概括成who可以对what进行how的访问操作，并对这个逻辑判断结果是否为true的过程。who表示的是用户，而不是角色，用户有不同的权限是因为用户有不同的角色。&lt;/p&gt;
&lt;h4 id="rbac的四种模型"&gt;RBAC的四种模型&lt;/h4&gt;
&lt;p&gt;分别是RBAC、RBAC1、RBAC2、RBAC3，RBAC是原始、最简单的版本；&lt;/p&gt;
&lt;p&gt;RBAC1是RBAC的优化，增加了角色的分层(即子角色)，子角色可以继承父角色的所有权限；&lt;/p&gt;
&lt;p&gt;RBAC2也是RBAC的优化，增加了对角色的一些限制，比如角色互斥、角色容量等。角色互斥的意思就是说当一个用户被赋予默写角色后就不能在赋予另一些角色，又分为静态职责分离和动态职责分离，静态说的就是在分配时校验互斥角色，动态是说可以分配，但是在建立会话时只能生效1个，角色容量的意思是一个角色可被分配的用户数是有限的，一个用户被赋予的角色数也是有限的；&lt;/p&gt;
&lt;p&gt;RBAC3是最复杂的模型，他把RBAC1和RBAC2进行了整合。&lt;/p&gt;
&lt;h3 id="abac"&gt;ABAC&lt;/h3&gt;
&lt;p&gt;Attribute-Based Access Control基于属性的访问控制，也被成为PBAC(Policy-Based Access Control)或者CBAC(Claims-Based Access Control)，他是通过一个或多个属性判断是否满足条件进行授权判断。&lt;/p&gt;
&lt;p&gt;阿里云的RAM账号权限管理就是基于ABAC模型实现的。&lt;/p&gt;
&lt;h3 id="面试"&gt;面试&lt;/h3&gt;
&lt;p&gt;ACL的关键要素？
ACL的优缺点
举一个ACL的实际例子&lt;/p&gt;
&lt;p&gt;DAC/MAC基于ACL做了什么改动
优缺点
举一个的例子&lt;/p&gt;
&lt;p&gt;RBAC的四种概念模型
RBAC的3个安全原则&lt;/p&gt;
&lt;p&gt;ABAC和RBAC的区别，主要在于授予用户访问权限的方式
ABAC的特点
ABAC的优缺点&lt;/p&gt;</description></item></channel></rss>